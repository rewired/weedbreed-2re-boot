[{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\scripts\\perf\\ciPerfCheck.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\config\\workforce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\constants\\climate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\constants\\economy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\constants\\goldenMaster.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\constants\\lighting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\constants\\perfBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\constants\\perfHarness.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\constants\\physics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\constants\\simConstants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\constants\\time.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\constants\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\constants\\workforce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\constants\\workforceMarket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\cultivation\\methodRuntime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\device\\condition.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\device\\createDeviceInstance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\device\\degradation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\device\\maintenanceRuntime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\containerBlueprint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\cultivationMethodBlueprint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\deviceBlueprint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\device\\guardTaxonomy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\device\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\device\\parse.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\device\\schemaBase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\device\\schemaByClass.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\diseaseBlueprint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\irrigationBlueprint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\personnelBlueprint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\pestBlueprint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\roomBlueprint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\strainBlueprint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\strainBlueprintLoader.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\structureBlueprint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\substrateBlueprint.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\blueprints\\taxonomy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\cultivation\\substrateUsage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\entities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\health\\pestDisease.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\interfaces\\IAirflowActuator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\interfaces\\ICo2Injector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\interfaces\\IFiltrationUnit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\interfaces\\IHumidityActuator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\interfaces\\IIrrigationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\interfaces\\ILightEmitter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\interfaces\\INutrientBuffer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\interfaces\\ISensor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\interfaces\\IThermalActuator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\interfaces\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\irrigation\\waterUsage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\payroll\\locationIndex.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\pricing\\cultivationMethodPriceMap.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\pricing\\devicePriceMap.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\schemas\\HarvestLotSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\schemas\\InventorySchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\schemas\\base.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\schemas\\company.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\schemas\\plant.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\schemas\\primitives.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\schemas\\room.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\schemas\\structure.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\schemas\\workforce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\schemas\\zone.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":26,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":26,"endColumn":44,"suppressions":[{"kind":"directive","justification":"Zone schema defaults rely on canonical neutral values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":27,"column":37,"nodeType":"Literal","messageId":"noMagic","endLine":27,"endColumn":40,"suppressions":[{"kind":"directive","justification":"Zone schema defaults rely on canonical neutral values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":28,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":28,"endColumn":36,"suppressions":[{"kind":"directive","justification":"Zone schema defaults rely on canonical neutral values"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\types\\HarvestLot.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\types\\Inventory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\validation\\company.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\validation\\devices.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\validation\\roomsZones.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\workforce\\Employee.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\workforce\\EmployeeRole.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\workforce\\WorkforceState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\workforce\\intents.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\workforce\\kpis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\workforce\\tasks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\workforce\\traits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\workforce\\warnings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\domain\\world.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\economy\\runtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\economy\\tariffs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\Engine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\conformance\\blueprintImports.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\conformance\\builder\\worldBuilder.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\conformance\\fixtures\\io.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\conformance\\goldenScenario.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\conformance\\recipes\\employees.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\conformance\\recipes\\rooms.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\conformance\\recipes\\zones.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\conformance\\runDeterministic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\conformance\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\conformance\\updateGoldenFixtures.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\conformance\\verify\\hashes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\perf\\perfBudget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\perf\\perfScenarios.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\advancePhysiology.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\aggregate\\zoneEffects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\applyDeviceEffects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\applyEconomyAccrual.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\applyHarvestAndInventory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\applyIrrigationAndNutrients.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\applySensors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\applyWorkforce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\commitAndTelemetry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\effects\\airflow.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\effects\\co2.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\effects\\humidity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\effects\\lighting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\effects\\thermal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\sensorReadingSchema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\pipeline\\updateEnvironment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\reporting\\cli.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\reporting\\generateSeedToHarvestReport.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\resolveTickHours.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\seedToHarvest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\testHarness.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 3.","line":26,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":26,"endColumn":34,"suppressions":[{"kind":"directive","justification":"Demo constants encode fixed scenario geometry"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 400.","line":27,"column":38,"nodeType":"Literal","messageId":"noMagic","endLine":27,"endColumn":41,"suppressions":[{"kind":"directive","justification":"Demo constants encode fixed scenario geometry"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 120.","line":28,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":28,"endColumn":36,"suppressions":[{"kind":"directive","justification":"Demo constants encode fixed scenario geometry"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 40.","line":30,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":30,"endColumn":43,"suppressions":[{"kind":"directive","justification":"Demo constants encode fixed scenario geometry"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 22.","line":33,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":33,"endColumn":35,"suppressions":[{"kind":"directive","justification":"Demo constants encode fixed scenario geometry"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.55.","line":34,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":34,"endColumn":43,"suppressions":[{"kind":"directive","justification":"Demo constants encode fixed scenario geometry"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 500.","line":35,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":35,"endColumn":38,"suppressions":[{"kind":"directive","justification":"Demo constants encode fixed scenario geometry"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 800.","line":36,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":36,"endColumn":38,"suppressions":[{"kind":"directive","justification":"Demo constants encode fixed scenario geometry"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":37,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":37,"endColumn":33,"suppressions":[{"kind":"directive","justification":"Demo constants encode fixed scenario geometry"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 53.55.","line":38,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":38,"endColumn":36,"suppressions":[{"kind":"directive","justification":"Demo constants encode fixed scenario geometry"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 5.","line":39,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":39,"endColumn":41,"suppressions":[{"kind":"directive","justification":"Demo constants encode fixed scenario geometry"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\thermo\\heat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\engine\\trace.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\health\\pestDiseaseRisk.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\health\\pestDiseaseSystem.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\physiology\\stressModel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\physiology\\vpd.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\readmodels\\economy\\structureTariffs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\readmodels\\inventory\\inventoryByStorageRoom.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\readmodels\\inventory\\inventoryByStructure.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\saveLoad\\constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\saveLoad\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\saveLoad\\migrations\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\saveLoad\\migrations\\registry.ts","messages":[{"ruleId":"@typescript-eslint/no-redundant-type-constituents","severity":2,"message":"'unknown' overrides all other types in this union type.","line":9,"column":41,"nodeType":"TSUnknownKeyword","messageId":"overrides","endLine":9,"endColumn":48}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\n\nimport { saveGameEnvelopeSchema } from '../schemas.ts';\nimport { fmtNum } from '../../util/format.ts';\n\nexport interface SaveGameMigrationStep {\n  readonly fromVersion: number;\n  readonly toVersion: number;\n  readonly migrate: (input: unknown) => unknown | Promise<unknown>;\n}\n\nconst schemaVersionSchema = saveGameEnvelopeSchema.extend({\n  schemaVersion: z.number().int().nonnegative(),\n});\n\nfunction extractSchemaVersion(payload: unknown): number {\n  const parsed = schemaVersionSchema.safeParse(payload);\n\n  if (!parsed.success) {\n    throw new Error('Save game payload is missing a numeric schemaVersion');\n  }\n\n  return parsed.data.schemaVersion;\n}\n\nexport class SaveGameMigrationRegistry {\n  private readonly steps = new Map<number, SaveGameMigrationStep>();\n\n  public constructor(private readonly targetVersion: number) {}\n\n  public register(step: SaveGameMigrationStep): void {\n    if (this.steps.has(step.fromVersion)) {\n      throw new Error(`Migration from version ${fmtNum(step.fromVersion)} already registered`);\n    }\n\n    if (step.toVersion <= step.fromVersion) {\n      throw new Error('Migration steps must increase schemaVersion');\n    }\n\n    this.steps.set(step.fromVersion, step);\n  }\n\n  public async migrate(payload: unknown, targetVersion = this.targetVersion): Promise<unknown> {\n    let working = payload;\n    let version = extractSchemaVersion(working);\n\n    if (version > targetVersion) {\n      throw new Error(`Cannot migrate save from newer schemaVersion ${fmtNum(version)}`);\n    }\n\n    while (version < targetVersion) {\n      const step = this.steps.get(version);\n\n      if (!step) {\n        throw new Error(`No migration registered for schemaVersion ${fmtNum(version)}`);\n      }\n\n       \n      working = await step.migrate(working);\n      version = extractSchemaVersion(working);\n\n      if (version !== step.toVersion) {\n        throw new Error(\n          `Migration from ${fmtNum(step.fromVersion)} returned schemaVersion ${fmtNum(version)}; expected ${fmtNum(step.toVersion)}`,\n        );\n      }\n    }\n\n    return working;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\saveLoad\\migrations\\v0ToV1.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\saveLoad\\saveManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\saveLoad\\schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\services\\storage\\resolveStorageRoom.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\services\\workforce\\identitySource.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\services\\workforce\\market.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\services\\workforce\\raises.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\stubs\\AirflowActuatorStub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\stubs\\Co2InjectorStub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\stubs\\FiltrationStub.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 200.","line":10,"column":47,"nodeType":"Literal","messageId":"noMagic","endLine":10,"endColumn":50,"suppressions":[{"kind":"directive","justification":"Filtration stub uses fixed empirical constants"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 1.5.","line":11,"column":38,"nodeType":"Literal","messageId":"noMagic","endLine":11,"endColumn":41,"suppressions":[{"kind":"directive","justification":"Filtration stub uses fixed empirical constants"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.005.","line":12,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":12,"endColumn":46,"suppressions":[{"kind":"directive","justification":"Filtration stub uses fixed empirical constants"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.3.","line":13,"column":41,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":44,"suppressions":[{"kind":"directive","justification":"Filtration stub uses fixed empirical constants"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.99.","line":14,"column":40,"nodeType":"Literal","messageId":"noMagic","endLine":14,"endColumn":44,"suppressions":[{"kind":"directive","justification":"Filtration stub uses fixed empirical constants"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.6.","line":15,"column":45,"nodeType":"Literal","messageId":"noMagic","endLine":15,"endColumn":48,"suppressions":[{"kind":"directive","justification":"Filtration stub uses fixed empirical constants"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\stubs\\HumidityActuatorStub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\stubs\\IrrigationServiceStub.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.1.","line":15,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":15,"endColumn":35,"suppressions":[{"kind":"directive","justification":"Irrigation stub uses deterministic leaching floor"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\stubs\\LightEmitterStub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\stubs\\NutrientBufferStub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\stubs\\SensorStub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\stubs\\ThermalActuatorStub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\stubs\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\telemetry\\health.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\telemetry\\hiring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\telemetry\\payload.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":6,"column":3,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":6,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export function cloneTelemetryPayload(payload: Record<string, unknown>): Record<string, unknown> {\n  if (typeof structuredClone === 'function') {\n    return structuredClone(payload);\n  }\n\n  return JSON.parse(JSON.stringify(payload));\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\telemetry\\topics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\telemetry\\workforce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\compose.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\environment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\error.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\format.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\growth.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":31,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":31,"endColumn":33,"suppressions":[{"kind":"directive","justification":"Growth noise uses centered uniform distribution"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\harvest.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\math.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":5,"column":14,"nodeType":"Literal","messageId":"noMagic","endLine":5,"endColumn":17,"suppressions":[{"kind":"directive","justification":"Banker's rounding uses 0.5 thresholds"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\perf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\photoperiod.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\rng.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 1779033703.","line":8,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":8,"endColumn":38,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 3432918353.","line":9,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":9,"endColumn":38,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 13.","line":10,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":10,"endColumn":34,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 19.","line":11,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":11,"endColumn":35,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 16.","line":12,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":12,"endColumn":29,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 2246822507.","line":13,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":38,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 13.","line":14,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":14,"endColumn":30,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 3266489909.","line":15,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":15,"endColumn":38,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 16.","line":16,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":16,"endColumn":29,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0x6d2b79f5.","line":18,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":18,"endColumn":40,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 15.","line":19,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":19,"endColumn":34,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 7.","line":20,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":20,"endColumn":34,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 14.","line":21,"column":32,"nodeType":"Literal","messageId":"noMagic","endLine":21,"endColumn":34,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 61.","line":22,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":22,"endColumn":30,"suppressions":[{"kind":"directive","justification":"RNG seeding constants require fixed literal parameters"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\stress.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\tariffs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\uuid.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 16.","line":7,"column":26,"nodeType":"Literal","messageId":"noMagic","endLine":7,"endColumn":28,"suppressions":[{"kind":"directive","justification":"UUID bit flags and segment lengths use fixed literal values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 8.","line":8,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":8,"endColumn":34,"suppressions":[{"kind":"directive","justification":"UUID bit flags and segment lengths use fixed literal values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 4.","line":8,"column":36,"nodeType":"Literal","messageId":"noMagic","endLine":8,"endColumn":37,"suppressions":[{"kind":"directive","justification":"UUID bit flags and segment lengths use fixed literal values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 4.","line":8,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":8,"endColumn":40,"suppressions":[{"kind":"directive","justification":"UUID bit flags and segment lengths use fixed literal values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 4.","line":8,"column":42,"nodeType":"Literal","messageId":"noMagic","endLine":8,"endColumn":43,"suppressions":[{"kind":"directive","justification":"UUID bit flags and segment lengths use fixed literal values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 8.","line":11,"column":28,"nodeType":"Literal","messageId":"noMagic","endLine":11,"endColumn":29,"suppressions":[{"kind":"directive","justification":"UUID bit flags and segment lengths use fixed literal values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0x0f.","line":13,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":13,"endColumn":31,"suppressions":[{"kind":"directive","justification":"UUID bit flags and segment lengths use fixed literal values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0x3f.","line":14,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":14,"endColumn":31,"suppressions":[{"kind":"directive","justification":"UUID bit flags and segment lengths use fixed literal values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0x40.","line":16,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":16,"endColumn":33,"suppressions":[{"kind":"directive","justification":"UUID bit flags and segment lengths use fixed literal values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0x70.","line":17,"column":29,"nodeType":"Literal","messageId":"noMagic","endLine":17,"endColumn":33,"suppressions":[{"kind":"directive","justification":"UUID bit flags and segment lengths use fixed literal values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0x80.","line":18,"column":35,"nodeType":"Literal","messageId":"noMagic","endLine":18,"endColumn":39,"suppressions":[{"kind":"directive","justification":"UUID bit flags and segment lengths use fixed literal values"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\util\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\workforce\\index.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.95.","line":63,"column":30,"nodeType":"Literal","messageId":"noMagic","endLine":63,"endColumn":34,"suppressions":[{"kind":"directive","justification":"Workforce KPIs use fixed percentile thresholds"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\workforce\\intents\\raises.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\workforce\\intents\\termination.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: -0.02.","line":9,"column":33,"nodeType":"UnaryExpression","messageId":"noMagic","endLine":9,"endColumn":38,"suppressions":[{"kind":"directive","justification":"Termination ripple uses canonical morale delta"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\workforce\\market\\candidates.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 5.","line":19,"column":39,"nodeType":"Literal","messageId":"noMagic","endLine":19,"endColumn":40,"suppressions":[{"kind":"directive","justification":"Workforce default heuristics rely on fixed reference values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.1.","line":21,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":21,"endColumn":36,"suppressions":[{"kind":"directive","justification":"Workforce default heuristics rely on fixed reference values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.7.","line":22,"column":26,"nodeType":"Literal","messageId":"noMagic","endLine":22,"endColumn":29,"suppressions":[{"kind":"directive","justification":"Workforce default heuristics rely on fixed reference values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.2.","line":23,"column":27,"nodeType":"Literal","messageId":"noMagic","endLine":23,"endColumn":30,"suppressions":[{"kind":"directive","justification":"Workforce default heuristics rely on fixed reference values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 8.","line":24,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":24,"endColumn":32,"suppressions":[{"kind":"directive","justification":"Workforce default heuristics rely on fixed reference values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 5.","line":25,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":25,"endColumn":32,"suppressions":[{"kind":"directive","justification":"Workforce default heuristics rely on fixed reference values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 8.","line":26,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":26,"endColumn":35,"suppressions":[{"kind":"directive","justification":"Workforce default heuristics rely on fixed reference values"}]},{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 8.","line":27,"column":34,"nodeType":"Literal","messageId":"noMagic","endLine":27,"endColumn":35,"suppressions":[{"kind":"directive","justification":"Workforce default heuristics rely on fixed reference values"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\workforce\\payroll\\accrual.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":26,"column":31,"nodeType":"Literal","messageId":"noMagic","endLine":26,"endColumn":34,"suppressions":[{"kind":"directive","justification":"Skill normalisation uses fixed neutral midpoint"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\workforce\\scheduler\\dispatch.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-magic-numbers","severity":1,"message":"No magic number: 0.5.","line":20,"column":33,"nodeType":"Literal","messageId":"noMagic","endLine":20,"endColumn":36,"suppressions":[{"kind":"directive","justification":"Neutral skill average uses canonical midpoint"}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\workforce\\telemetry\\workforceEmit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\workforce\\traits\\effects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\backend\\src\\workforce\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\shared\\determinism\\hash.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\shared\\determinism\\ids.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\src\\shared\\psychro\\psychro.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\conformance\\goldenMaster.200d.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\conformance\\goldenMaster.30d.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\domain\\worldValidation.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\perf\\baseline.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\applyHarvestAndInventory.int.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\co2Coupling.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Zone' is defined but never used.","line":6,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":39}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it } from 'vitest';\n\nimport { HOURS_PER_TICK } from '@/backend/src/constants/simConstants';\nimport { runTick, type EngineRunContext } from '@/backend/src/engine/Engine';\nimport { createDemoWorld } from '@/backend/src/engine/testHarness';\nimport type { ZoneDeviceInstance, Zone, Uuid } from '@/backend/src/domain/world';\nimport type { DeviceBlueprint } from '@/backend/src/domain/blueprints/deviceBlueprint';\nimport { deviceQuality } from '../../testUtils/deviceHelpers.ts';\n\nfunction uuid(value: string): Uuid {\n  return value as Uuid;\n}\n\ndescribe('Tick pipeline — CO₂ coupling', () => {\n  const QUALITY_POLICY = { sampleQuality01: (rng: () => number) => rng() } as const;\n  const WORLD_SEED = 'co2-coupling';\n  const CO2_TEST_BLUEPRINT: DeviceBlueprint = {\n    id: '70000000-0000-0000-0000-000000000000',\n    slug: 'test-co2-injector',\n    class: 'device.test.co2',\n    name: 'Test CO₂ Injector',\n    placementScope: 'zone',\n    allowedRoomPurposes: ['growroom'],\n    power_W: 80,\n    efficiency01: 1,\n    coverage_m2: 10,\n    airflow_m3_per_h: 0\n  } as DeviceBlueprint;\n\n  function co2Device(id: string): ZoneDeviceInstance {\n    const deviceId = uuid(id);\n    return {\n      id: deviceId,\n      slug: CO2_TEST_BLUEPRINT.slug,\n      name: CO2_TEST_BLUEPRINT.name,\n      blueprintId: uuid(CO2_TEST_BLUEPRINT.id),\n      placementScope: 'zone',\n      quality01: deviceQuality(QUALITY_POLICY, WORLD_SEED, deviceId, CO2_TEST_BLUEPRINT),\n      condition01: 1,\n      powerDraw_W: CO2_TEST_BLUEPRINT.power_W,\n      dutyCycle01: 1,\n      efficiency01: CO2_TEST_BLUEPRINT.efficiency01,\n      coverage_m2: CO2_TEST_BLUEPRINT.coverage_m2 ?? 0,\n      airflow_m3_per_h: CO2_TEST_BLUEPRINT.airflow_m3_per_h ?? 0,\n      sensibleHeatRemovalCapacity_W: 0,\n      effects: ['co2'],\n      effectConfigs: {\n        co2: {\n          target_ppm: 900,\n          safetyMax_ppm: 1_000,\n          pulse_ppm_per_tick: 200\n        }\n      }\n    } satisfies ZoneDeviceInstance;\n  }\n\n  it('adds the injected ppm to the zone environment', () => {\n    const world = createDemoWorld();\n    const zone = world.company.structures[0].rooms[0].zones[0];\n    zone.environment = { ...zone.environment, co2_ppm: 420 };\n    zone.devices = [co2Device('70000000-0000-0000-0000-000000000001')];\n\n    const { world: nextWorld } = runTick(world, { tickDurationHours: 1 });\n    const nextZone = nextWorld.company.structures[0].rooms[0].zones[0];\n\n    expect(nextZone.environment.co2_ppm).toBeCloseTo(620, 6);\n  });\n\n  it('ramps towards the target across multiple ticks without exceeding safety max', () => {\n    let world = createDemoWorld();\n    const zone = world.company.structures[0].rooms[0].zones[0];\n    zone.environment = { ...zone.environment, co2_ppm: 420 };\n    zone.devices = [co2Device('70000000-0000-0000-0000-000000000002')];\n\n    const ctx: EngineRunContext = { tickDurationHours: HOURS_PER_TICK };\n\n    for (let i = 0; i < 3; i += 1) {\n      const tickResult = runTick(world, ctx);\n      world = tickResult.world;\n    }\n\n    const nextZone = world.company.structures[0].rooms[0].zones[0];\n    expect(nextZone.environment.co2_ppm).toBeCloseTo(900, 6);\n    expect(nextZone.environment.co2_ppm).toBeLessThanOrEqual(1_000);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\cultivationMethodTasks.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":63,"column":30,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":63,"endColumn":78},{"ruleId":"@typescript-eslint/no-empty-function","severity":2,"message":"Unexpected empty method 'emit'.","line":108,"column":62,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":108,"endColumn":64,"suggestions":[{"messageId":"suggestComment","data":{"name":"method 'emit'"},"fix":{"range":[3699,3699],"text":" /* empty */ "},"desc":"Add comment inside empty method 'emit'."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":112,"column":21,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":112,"endColumn":54},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary optional chain on a non-nullish value.","line":112,"column":43,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":112,"endColumn":45,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[3869,3871],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":121,"column":27,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":121,"endColumn":75}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it } from 'vitest';\n\nimport basicSoilPot from '../../../../../data/blueprints/cultivation-method/basic-soil-pot.json' with { type: 'json' };\nimport pot10L from '../../../../../data/blueprints/container/pot-10l.json' with { type: 'json' };\nimport soilMultiCycle from '../../../../../data/blueprints/substrate/soil-multi-cycle.json' with { type: 'json' };\n\nimport { PIPELINE_ORDER, type EngineRunContext } from '@/backend/src/engine/Engine';\nimport { createDemoWorld, runStages } from '@/backend/src/engine/testHarness';\nimport type {\n  Plant,\n  SimulationWorld,\n  Structure,\n  Room,\n  Zone,\n  WorkforceState,\n  WorkforceTaskDefinition,\n  WorkforceTaskInstance,\n  Uuid,\n} from '@/backend/src/domain/world';\n\nfunction createTaskDefinition(taskCode: string, priority = 60): WorkforceTaskDefinition {\n  return {\n    taskCode,\n    description: taskCode,\n    requiredRoleSlug: 'cultivator',\n    requiredSkills: [],\n    priority,\n    costModel: { basis: 'perPlant', laborMinutes: 10 },\n  } satisfies WorkforceTaskDefinition;\n}\n\nfunction updateZone(\n  world: SimulationWorld,\n  updater: (structure: Structure, room: Room, zone: Zone) => Zone,\n): SimulationWorld {\n  const structure = world.company.structures[0];\n  const room = structure.rooms[0];\n  const zone = room.zones[0];\n  const nextZone = updater(structure, room, zone);\n  const nextRoom = { ...room, zones: [nextZone] } satisfies typeof room;\n  const nextStructure = { ...structure, rooms: [nextRoom] } satisfies typeof structure;\n  const nextCompany = { ...world.company, structures: [nextStructure] } satisfies typeof world.company;\n\n  return {\n    ...world,\n    company: nextCompany,\n  } satisfies SimulationWorld;\n}\n\ndescribe('cultivation method task scheduling integration', () => {\n  it('queues deterministic maintenance tasks over successive harvest cycles', () => {\n    let world = createDemoWorld();\n    world = {\n      ...world,\n      simTimeHours: 24,\n    } satisfies SimulationWorld;\n\n    const workforceState: WorkforceState = {\n      roles: [],\n      employees: [],\n      taskDefinitions: [\n        createTaskDefinition('cultivation.repot', 80),\n        createTaskDefinition(soilMultiCycle.reusePolicy.sterilizationTaskCode ?? 'cultivation.substrate.sterilize', 70),\n        createTaskDefinition('cultivation.substrate.dispose', 90),\n      ],\n      taskQueue: [],\n      kpis: [],\n      warnings: [],\n      payroll: {\n        dayIndex: 0,\n        totals: { baseMinutes: 0, otMinutes: 0, baseCost: 0, otCost: 0, totalLaborCost: 0 },\n        byStructure: [],\n      },\n      market: { structures: [] },\n    } satisfies WorkforceState;\n\n    const basePlant: Omit<Plant, 'id'> = {\n      name: 'Integration Plant',\n      slug: 'integration-plant',\n      strainId: '00000000-0000-4000-8000-000000000111' as Uuid,\n      lifecycleStage: 'harvest-ready',\n      ageHours: 640,\n      health01: 0.92,\n      biomass_g: 420,\n      containerId: pot10L.id as Uuid,\n      substrateId: soilMultiCycle.id as Uuid,\n      readyForHarvest: false,\n      status: 'harvested',\n      harvestedAt_tick: 23,\n    } satisfies Omit<Plant, 'id'>;\n\n    world = updateZone(world, (_structure, _room, incomingZone) => ({\n      ...incomingZone,\n      cultivationMethodId: basicSoilPot.id as Uuid,\n      containerId: pot10L.id as Uuid,\n      substrateId: soilMultiCycle.id as Uuid,\n      plants: [\n        { ...basePlant, id: '00000000-0000-4000-8000-000000000201' as Uuid },\n        { ...basePlant, id: '00000000-0000-4000-8000-000000000202' as Uuid },\n      ],\n    } satisfies Zone));\n\n    world = {\n      ...world,\n      workforce: workforceState,\n    } satisfies SimulationWorld;\n\n    const ctx: EngineRunContext = { telemetry: { emit: () => {} } };\n    let previousQueueLength = 0;\n\n    function extractNewTasks(currentWorld: SimulationWorld): WorkforceTaskInstance[] {\n      const queue = currentWorld.workforce?.taskQueue ?? [];\n      const newEntries = queue.slice(previousQueueLength);\n      previousQueueLength = queue.length;\n      return newEntries;\n    }\n\n    // Cycle 1 - expect sterilisation task\n    world = runStages(world, ctx, PIPELINE_ORDER);\n    let newTasks = extractNewTasks(world);\n    const steriliseCode = soilMultiCycle.reusePolicy.sterilizationTaskCode ?? 'cultivation.substrate.sterilize';\n    expect(newTasks.map((task) => task.taskCode)).toEqual([steriliseCode]);\n\n    // Prepare Cycle 2 - update harvest tick to current cycle\n    world = updateZone(world, (_structure, _room, incomingZone) => {\n      const updatedPlants = incomingZone.plants.map((plant) => ({\n        ...plant,\n        harvestedAt_tick: Math.trunc(world.simTimeHours) - 1,\n      }));\n\n      return { ...incomingZone, plants: updatedPlants } satisfies Zone;\n    });\n\n    world = runStages(world, ctx, PIPELINE_ORDER);\n    newTasks = extractNewTasks(world);\n    expect(newTasks.map((task) => task.taskCode)).toEqual(['cultivation.substrate.dispose']);\n\n    // Prepare Cycle 3 - container service life reached, expect repot + sterilise\n    world = updateZone(world, (_structure, _room, incomingZone) => {\n      const updatedPlants = incomingZone.plants.map((plant) => ({\n        ...plant,\n        harvestedAt_tick: Math.trunc(world.simTimeHours) - 1,\n      }));\n\n      return { ...incomingZone, plants: updatedPlants } satisfies Zone;\n    });\n\n    world = runStages(world, ctx, PIPELINE_ORDER);\n    newTasks = extractNewTasks(world);\n    const sortedCodes = newTasks.map((task) => task.taskCode).sort();\n    expect(sortedCodes).toEqual(['cultivation.repot', steriliseCode].sort());\n\n    // Ensure contexts carry zone metadata for downstream scheduling\n    newTasks.forEach((task) => {\n      expect(task.context?.zoneId).toBe(world.company.structures[0]?.rooms[0]?.zones[0]?.id);\n      expect(task.context?.structureId).toBe(world.company.structures[0]?.id);\n    });\n  });\n});\n\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\deviceMaintenance.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\deviceThermals.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":102,"column":23,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":102,"endColumn":79}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it } from 'vitest';\n\nimport {\n  CP_AIR_J_PER_KG_K,\n  HOURS_PER_TICK,\n  SECONDS_PER_HOUR\n} from '@/backend/src/constants/simConstants';\nimport type { EngineRunContext } from '@/backend/src/engine/Engine';\nimport { runTick } from '@/backend/src/engine/Engine';\nimport { createDemoWorld } from '@/backend/src/engine/testHarness';\nimport { type DeviceQualityPolicy, type Uuid, type ZoneDeviceInstance } from '@/backend/src/domain/world';\nimport type { DeviceBlueprint } from '@/backend/src/domain/blueprints/deviceBlueprint';\nimport { deviceQuality } from '../../testUtils/deviceHelpers.ts';\n\nfunction uuid(value: string): Uuid {\n  return value as Uuid;\n}\n\nconst QUALITY_POLICY: DeviceQualityPolicy = {\n  sampleQuality01: (rng) => rng()\n};\n\nconst WORLD_SEED = 'device-thermals-seed';\n\nconst LIGHTING_BLUEPRINT: DeviceBlueprint = {\n  id: '20000000-0000-0000-0000-000000000002',\n  slug: 'veg-light',\n  class: 'device.test.lighting',\n  name: 'Veg Light',\n  placementScope: 'zone',\n  allowedRoomPurposes: ['growroom'],\n  power_W: 600,\n  efficiency01: 0.2,\n  coverage_m2: 60,\n  airflow_m3_per_h: 0\n};\n\nconst HVAC_BLUEPRINT: DeviceBlueprint = {\n  id: '20000000-0000-0000-0000-000000000004',\n  slug: 'zone-hvac',\n  class: 'device.test.hvac',\n  name: 'Zone HVAC',\n  placementScope: 'zone',\n  allowedRoomPurposes: ['growroom'],\n  power_W: 800,\n  efficiency01: 0.6,\n  coverage_m2: 60,\n  airflow_m3_per_h: 0\n};\n\ndescribe('Tick pipeline — device thermal effects', () => {\n  it('integrates heat additions and HVAC removals across the first two stages', () => {\n    const world = createDemoWorld();\n    const structure = world.company.structures[0];\n    const room = structure.rooms[0];\n    const zone = room.zones[0];\n    const initialTemperatureC = zone.environment.airTemperatureC;\n\n    const lightingDeviceId = uuid('20000000-0000-0000-0000-000000000001');\n    const lightingDevice: ZoneDeviceInstance = {\n      id: lightingDeviceId,\n      slug: LIGHTING_BLUEPRINT.slug,\n      name: LIGHTING_BLUEPRINT.name,\n      blueprintId: uuid(LIGHTING_BLUEPRINT.id),\n      placementScope: 'zone',\n      quality01: deviceQuality(QUALITY_POLICY, WORLD_SEED, lightingDeviceId, LIGHTING_BLUEPRINT),\n      condition01: 0.94,\n      powerDraw_W: 600,\n      dutyCycle01: 1,\n      efficiency01: 0.2,\n      coverage_m2: 60,\n      airflow_m3_per_h: 0,\n      sensibleHeatRemovalCapacity_W: 0\n    } satisfies ZoneDeviceInstance;\n\n    const hvacDeviceId = uuid('20000000-0000-0000-0000-000000000003');\n    const hvacDevice: ZoneDeviceInstance = {\n      id: hvacDeviceId,\n      slug: HVAC_BLUEPRINT.slug,\n      name: HVAC_BLUEPRINT.name,\n      blueprintId: uuid(HVAC_BLUEPRINT.id),\n      placementScope: 'zone',\n      quality01: deviceQuality(QUALITY_POLICY, WORLD_SEED, hvacDeviceId, HVAC_BLUEPRINT),\n      condition01: 0.9,\n      powerDraw_W: 800,\n      dutyCycle01: 1,\n      efficiency01: 0.6,\n      coverage_m2: 60,\n      airflow_m3_per_h: 0,\n      sensibleHeatRemovalCapacity_W: 500\n    } satisfies ZoneDeviceInstance;\n\n    zone.devices = [lightingDevice, hvacDevice];\n\n    const ctx: EngineRunContext = {\n      tickDurationHours: 0.5\n    } satisfies EngineRunContext;\n\n    const { world: nextWorld } = runTick(world, ctx);\n\n    const nextZone = nextWorld.company.structures[0].rooms[0].zones[0];\n    const tickHours = (ctx as { tickDurationHours: number }).tickDurationHours ?? HOURS_PER_TICK;\n    const tickSeconds = tickHours * SECONDS_PER_HOUR;\n    const airMassKg = zone.airMass_kg;\n\n    const heating_W = lightingDevice.powerDraw_W * (1 - lightingDevice.efficiency01);\n    const hvacCooling_W = Math.min(\n      hvacDevice.powerDraw_W * hvacDevice.dutyCycle01 * hvacDevice.efficiency01,\n      hvacDevice.sensibleHeatRemovalCapacity_W\n    );\n    const additionDeltaC = (heating_W * tickSeconds) / (airMassKg * CP_AIR_J_PER_KG_K);\n    const removalDeltaC = (hvacCooling_W * tickSeconds) / (airMassKg * CP_AIR_J_PER_KG_K);\n\n    const expectedTemperatureC = initialTemperatureC + additionDeltaC - removalDeltaC;\n\n    expect(nextZone.environment.airTemperatureC).toBeCloseTo(expectedTemperatureC, 10);\n    expect((ctx as Record<string, unknown>).__wb_deviceEffects).toBeUndefined();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\economyAccrual.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\fanFilterChain.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\irrigationNutrientPattern.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\irrigationNutrients.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\lightingEffects.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\multiEffectDevice.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\order.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\pestDiseaseMvp.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\plantPhysiology.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\plantStress.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\seedToHarvest.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, value is always truthy.","line":67,"column":18,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":67,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it } from 'vitest';\n\nimport { runSeedToHarvest } from '@/backend/src/engine/seedToHarvest';\nimport type { Plant, SimulationWorld, Zone } from '@/backend/src/domain/world';\nimport { WHITE_WIDOW_STRAIN_ID } from '@/tests/testUtils/strainFixtures.ts';\n\ntype SeedToHarvestResult = ReturnType<typeof runSeedToHarvest>;\ntype StageTransition = SeedToHarvestResult['stageTransitions'][number];\n\nfunction findZone(world: SimulationWorld, zoneId: Zone['id']): Zone | null {\n  for (const structure of world.company.structures) {\n    for (const room of structure.rooms) {\n      const candidate = room.zones.find((zone) => zone.id === zoneId);\n\n      if (candidate) {\n        return candidate;\n      }\n    }\n  }\n\n  return null;\n}\n\ndescribe('seed-to-harvest orchestrator integration', () => {\n  it('advances White Widow plants from seed to harvest-ready and stores deterministic lots', () => {\n    const result = runSeedToHarvest({\n      strainId: WHITE_WIDOW_STRAIN_ID\n    });\n\n    expect(result.ticksElapsed).toBe(2256);\n    expect(result.stageTransitions).toHaveLength(18);\n\n    const transitionsByPlant = new Map<Plant['id'], StageTransition[]>();\n\n    for (const transition of result.stageTransitions) {\n      const existing = transitionsByPlant.get(transition.plantId);\n\n      if (existing) {\n        existing.push(transition);\n      } else {\n        transitionsByPlant.set(transition.plantId, [transition]);\n      }\n    }\n\n    for (const transitions of transitionsByPlant.values()) {\n      const ordered = [...transitions].sort((left, right) => left.tick - right.tick);\n      const ticks = ordered.map((event) => event.tick);\n\n      expect(ordered).toHaveLength(3);\n      expect(new Set(ordered.map((event) => event.plantId)).size).toBe(1);\n      expect(ticks).toEqual([...ticks].sort((a, b) => a - b));\n      expect(\n        ordered.map((event) => `${event.from}->${event.to}`)\n      ).toEqual(['seedling->vegetative', 'vegetative->flowering', 'flowering->harvest-ready']);\n    }\n\n    const photoperiodFlip = result.photoperiodTransitions[0];\n    expect(result.photoperiodTransitions).toHaveLength(1);\n    expect(photoperiodFlip).toMatchObject({\n      tick: 823,\n      fromPhase: 'vegetative',\n      toPhase: 'flowering',\n      previousSchedule: { onHours: 18, offHours: 6, startHour: 0 },\n      nextSchedule: { onHours: 12, offHours: 12, startHour: 0 }\n    });\n\n    const zone = photoperiodFlip ? findZone(result.world, photoperiodFlip.zoneId) : null;\n    expect(zone).not.toBeNull();\n    expect(zone?.lightSchedule).toEqual(photoperiodFlip.nextSchedule);\n    expect(zone?.photoperiodPhase).toBe('flowering');\n\n    const finalPlants = zone?.plants ?? [];\n    expect(finalPlants).toHaveLength(transitionsByPlant.size);\n    expect(finalPlants.every((plant) => plant.lifecycleStage === 'harvest-ready')).toBe(true);\n    expect(finalPlants.every((plant) => plant.status === 'harvested')).toBe(true);\n\n    const plantIds = new Set([...transitionsByPlant.keys()]);\n    const lotPlantIds = new Set(result.harvestedLots.map((lot) => lot.source.plantId));\n    expect(lotPlantIds).toEqual(plantIds);\n\n    expect(result.harvestedLots).toHaveLength(finalPlants.length);\n    expect(result.totalBiomass_g).toBeCloseTo(6, 5);\n\n    for (const lot of result.harvestedLots) {\n      expect(lot.freshWeight_kg).toBeCloseTo(0.001, 6);\n      expect(lot.moisture01).toBe(0.5);\n      expect(lot.quality01).toBe(0);\n      expect(lot.createdAt_tick).toBe(2255);\n    }\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\sensorActuatorPattern.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":35,"column":20,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":35,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it } from 'vitest';\n\nimport { getSensorReadingsRuntime } from '@/backend/src/engine/pipeline/applySensors';\nimport { runTick, type EngineRunContext } from '@/backend/src/engine/Engine';\nimport { createDemoWorld } from '@/backend/src/engine/testHarness';\nimport type { SensorReading } from '@/backend/src/domain/interfaces/ISensor';\nimport type { ZoneDeviceInstance, Uuid } from '@/backend/src/domain/world';\n\nfunction uuid(value: string): Uuid {\n  return value as Uuid;\n}\n\ndescribe('Tick pipeline — sensor + actuator pattern', () => {\n  it('Pattern D: Sensor reads pre-tick, actuator applies post-read', () => {\n    const world = createDemoWorld();\n    const zone = world.company.structures[0].rooms[0].zones[0];\n\n    zone.environment = {\n      ...zone.environment,\n      airTemperatureC: 20,\n    };\n\n    const deviceId = uuid('60000000-0000-0000-0000-000000000001');\n    const tempController: ZoneDeviceInstance = {\n      id: deviceId,\n      slug: 'temp-controller',\n      name: 'Temperature Controller',\n      blueprintId: uuid('60000000-0000-0000-0000-000000000002'),\n      placementScope: 'zone',\n      quality01: 1,\n      condition01: 1,\n      powerDraw_W: 500,\n      dutyCycle01: 1,\n      efficiency01: 0.8,\n      coverage_m2: zone.floorArea_m2 ?? 0,\n      airflow_m3_per_h: 0,\n      sensibleHeatRemovalCapacity_W: 0,\n      effects: ['sensor', 'thermal'],\n      effectConfigs: {\n        sensor: { measurementType: 'temperature', noise01: 0 },\n        thermal: { mode: 'heat', max_heat_W: 500 },\n      },\n    } satisfies ZoneDeviceInstance;\n\n    zone.devices = [tempController];\n\n    const initialTemperature = zone.environment.airTemperatureC;\n\n    const tickOneSnapshots: SensorReading<number>[] = [];\n    const ctxTickOne: EngineRunContext = {\n      instrumentation: {\n        onStageComplete(stage) {\n          if (stage !== 'applySensors') {\n            return;\n          }\n\n          const runtime = getSensorReadingsRuntime(ctxTickOne);\n          const readings = runtime?.deviceSensorReadings.get(deviceId) ?? [];\n          tickOneSnapshots.push(...readings);\n        },\n      },\n    } satisfies EngineRunContext;\n\n    const { world: afterFirst } = runTick(world, ctxTickOne);\n    const firstZone = afterFirst.company.structures[0].rooms[0].zones[0];\n\n    expect(tickOneSnapshots).toHaveLength(1);\n    expect(tickOneSnapshots[0]?.measuredValue).toBeCloseTo(initialTemperature, 5);\n    expect(tickOneSnapshots[0]?.trueValue).toBeCloseTo(initialTemperature, 5);\n    expect(tickOneSnapshots[0]?.noiseSample).toBe(0);\n    expect(firstZone.environment.airTemperatureC).toBeGreaterThan(initialTemperature);\n\n    const tickTwoSnapshots: SensorReading<number>[] = [];\n    const baselineSecondTemp = firstZone.environment.airTemperatureC;\n    const ctxTickTwo: EngineRunContext = {\n      instrumentation: {\n        onStageComplete(stage) {\n          if (stage !== 'applySensors') {\n            return;\n          }\n\n          const runtime = getSensorReadingsRuntime(ctxTickTwo);\n          const readings = runtime?.deviceSensorReadings.get(deviceId) ?? [];\n          tickTwoSnapshots.push(...readings);\n        },\n      },\n    } satisfies EngineRunContext;\n\n    const { world: afterSecond } = runTick(afterFirst, ctxTickTwo);\n    const secondZone = afterSecond.company.structures[0].rooms[0].zones[0];\n\n    expect(tickTwoSnapshots).toHaveLength(1);\n    expect(tickTwoSnapshots[0]?.measuredValue).toBeCloseTo(baselineSecondTemp, 5);\n    expect(tickTwoSnapshots[0]?.trueValue).toBeCloseTo(baselineSecondTemp, 5);\n    expect(tickTwoSnapshots[0]?.noiseSample).toBe(0);\n    expect(secondZone.environment.airTemperatureC).toBeGreaterThan(baselineSecondTemp);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\sensorReadings.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary optional chain on a non-nullish value.","line":182,"column":19,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":182,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[5685,5687],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary optional chain on a non-nullish value.","line":184,"column":19,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":184,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[5844,5846],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary optional chain on a non-nullish value.","line":185,"column":19,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":185,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[5880,5882],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary optional chain on a non-nullish value.","line":186,"column":19,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":186,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[5948,5950],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary optional chain on a non-nullish value.","line":187,"column":19,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":187,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6006,6008],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary optional chain on a non-nullish value.","line":188,"column":19,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":188,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6044,6046],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary optional chain on a non-nullish value.","line":189,"column":19,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":189,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6086,6088],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary optional chain on a non-nullish value.","line":190,"column":19,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":190,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6147,6149],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary optional chain on a non-nullish value.","line":191,"column":19,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":191,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6216,6218],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary optional chain on a non-nullish value.","line":192,"column":19,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":192,"endColumn":21,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6258,6260],"text":"."},"desc":"Remove unnecessary optional chain"}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it } from 'vitest';\n\nimport { runTick, type EngineRunContext } from '@/backend/src/engine/Engine';\nimport { getSensorReadingsRuntime } from '@/backend/src/engine/pipeline/applySensors';\nimport { createDemoWorld } from '@/backend/src/engine/testHarness';\nimport type { SensorReading } from '@/backend/src/domain/interfaces/ISensor';\nimport type { DeviceBlueprint } from '@/backend/src/domain/blueprints/deviceBlueprint';\nimport { type DeviceQualityPolicy, type Uuid, type ZoneDeviceInstance } from '@/backend/src/domain/world';\nimport { deviceQuality } from '../../testUtils/deviceHelpers.ts';\n\nfunction uuid(value: string): Uuid {\n  return value as Uuid;\n}\n\nconst QUALITY_POLICY: DeviceQualityPolicy = {\n  sampleQuality01: (rng) => rng()\n};\n\nconst WORLD_SEED = 'sensor-seed';\n\nconst SENSOR_BLUEPRINT: DeviceBlueprint = {\n  id: '40000000-0000-0000-0000-000000000000',\n  slug: 'temperature-sensor',\n  class: 'device.test.sensor',\n  name: 'Temperature Sensor',\n  placementScope: 'zone',\n  allowedRoomPurposes: ['growroom'],\n  power_W: 0,\n  efficiency01: 1,\n  coverage_m2: 0,\n  airflow_m3_per_h: 0,\n  effects: ['sensor'],\n  sensor: {\n    measurementType: 'temperature',\n    noise01: 0\n  }\n};\n\nconst HEATER_BLUEPRINT: DeviceBlueprint = {\n  id: '40000000-0000-0000-0000-000000000001',\n  slug: 'integration-heater',\n  class: 'device.test.heater',\n  name: 'Integration Heater',\n  placementScope: 'zone',\n  allowedRoomPurposes: ['growroom'],\n  power_W: 1_000,\n  efficiency01: 0.2,\n  coverage_m2: 20,\n  airflow_m3_per_h: 0,\n  effects: ['thermal'],\n  thermal: {\n    mode: 'heat'\n  }\n};\n\nfunction runSensorTick(\n  world: ReturnType<typeof createDemoWorld>,\n  deviceId: Uuid\n): SensorReading<number>[] {\n  const readings: SensorReading<number>[] = [];\n  const ctx: EngineRunContext = {\n    instrumentation: {\n      onStageComplete(stage) {\n        if (stage !== 'applySensors') {\n          return;\n        }\n\n        const runtime = getSensorReadingsRuntime(ctx);\n        const deviceReadings = runtime?.deviceSensorReadings.get(deviceId);\n\n        if (deviceReadings?.[0]) {\n          readings.push(deviceReadings[0]);\n        }\n      }\n    }\n  };\n\n  runTick(world, ctx);\n\n  return readings;\n}\n\ndescribe('Tick pipeline — sensor readings', () => {\n  it('registers applySensors in the pipeline trace before updateEnvironment', () => {\n    const world = createDemoWorld();\n    const ctx: EngineRunContext = {};\n\n    const { trace } = runTick(world, ctx, { trace: true });\n\n    expect(trace).toBeDefined();\n    const stepNames = trace?.steps.map((step) => step.name) ?? [];\n    const deviceEffectsIndex = stepNames.indexOf('applyDeviceEffects');\n    const sensorIndex = stepNames.indexOf('applySensors');\n    const updateIndex = stepNames.indexOf('updateEnvironment');\n    const advanceIndex = stepNames.indexOf('advancePhysiology');\n\n    expect(deviceEffectsIndex).toBeGreaterThanOrEqual(0);\n    expect(sensorIndex).toBe(deviceEffectsIndex + 1);\n    expect(updateIndex).toBe(sensorIndex + 1);\n    expect(sensorIndex).toBeLessThan(advanceIndex);\n    expect(getSensorReadingsRuntime(ctx)).toBeUndefined();\n  });\n\n  it('sensors capture the pre-integration environment state after actuators run', () => {\n    const world = createDemoWorld();\n    const structure = world.company.structures[0];\n    const room = structure.rooms[0];\n    const zone = room.zones[0];\n\n    zone.environment = {\n      ...zone.environment,\n      airTemperatureC: 20\n    };\n\n    const baselineTemperature = zone.environment.airTemperatureC;\n\n    const heaterId = uuid('40000000-0000-0000-0000-000000000010');\n    const heater: ZoneDeviceInstance = {\n      id: heaterId,\n      slug: HEATER_BLUEPRINT.slug,\n      name: HEATER_BLUEPRINT.name,\n      blueprintId: HEATER_BLUEPRINT.id,\n      placementScope: 'zone',\n      quality01: deviceQuality(QUALITY_POLICY, WORLD_SEED, heaterId, HEATER_BLUEPRINT),\n      condition01: 1,\n      powerDraw_W: HEATER_BLUEPRINT.power_W,\n      dutyCycle01: 1,\n      efficiency01: HEATER_BLUEPRINT.efficiency01,\n      coverage_m2: HEATER_BLUEPRINT.coverage_m2 ?? 0,\n      airflow_m3_per_h: HEATER_BLUEPRINT.airflow_m3_per_h ?? 0,\n      sensibleHeatRemovalCapacity_W: 0,\n      effects: ['thermal'],\n      effectConfigs: { thermal: { mode: 'heat' } }\n    } satisfies ZoneDeviceInstance;\n\n    const sensorId = uuid('40000000-0000-0000-0000-000000000011');\n    const sensor: ZoneDeviceInstance = {\n      id: sensorId,\n      slug: SENSOR_BLUEPRINT.slug,\n      name: SENSOR_BLUEPRINT.name,\n      blueprintId: SENSOR_BLUEPRINT.id,\n      placementScope: 'zone',\n      quality01: deviceQuality(QUALITY_POLICY, WORLD_SEED, sensorId, SENSOR_BLUEPRINT),\n      condition01: 1,\n      powerDraw_W: 0,\n      dutyCycle01: 1,\n      efficiency01: 1,\n      coverage_m2: 0,\n      airflow_m3_per_h: 0,\n      sensibleHeatRemovalCapacity_W: 0,\n      effects: ['sensor'],\n      effectConfigs: {\n        sensor: {\n          measurementType: 'temperature',\n          noise01: 0\n        }\n      }\n    } satisfies ZoneDeviceInstance;\n\n    zone.devices = [heater, sensor];\n\n    const captured: SensorReading<number>[] = [];\n    const ctx: EngineRunContext = {\n      instrumentation: {\n        onStageComplete(stage) {\n          if (stage !== 'applySensors') {\n            return;\n          }\n\n          const runtime = getSensorReadingsRuntime(ctx);\n          const readings = runtime?.deviceSensorReadings.get(sensorId) ?? [];\n          captured.push(...readings);\n        }\n      }\n    };\n\n    const { world: nextWorld } = runTick(world, ctx);\n    const nextZone = nextWorld.company.structures[0].rooms[0].zones[0];\n\n    expect(captured).toHaveLength(1);\n    const [reading] = captured;\n    expect(reading?.measuredValue).toBeCloseTo(baselineTemperature, 5);\n    expect(nextZone.environment.airTemperatureC).toBeGreaterThan(baselineTemperature);\n    expect(reading?.error).toBe(0);\n    expect(reading?.trueValue).toBeCloseTo(baselineTemperature, 5);\n    expect(reading?.measurementType).toBe('temperature');\n    expect(reading?.noise01).toBe(0);\n    expect(reading?.noiseSample).toBe(0);\n    expect(reading?.rngStreamId).toBe(`sensor:${sensorId}`);\n    expect(reading?.sampledAtSimTimeHours).toBe(world.simTimeHours);\n    expect(reading?.sampledTick).toBe(0);\n    expect(reading?.tickDurationHours).toBeGreaterThan(0);\n  });\n\n  it('records readings from multiple sensors', () => {\n    const world = createDemoWorld();\n    const zone = world.company.structures[0].rooms[0].zones[0];\n\n    const temperatureSensorId = uuid('40000000-0000-0000-0000-000000000012');\n    const humiditySensorId = uuid('40000000-0000-0000-0000-000000000013');\n\n    const temperatureSensor: ZoneDeviceInstance = {\n      id: temperatureSensorId,\n      slug: 'temp-sensor',\n      name: 'Temp Sensor',\n      blueprintId: SENSOR_BLUEPRINT.id,\n      placementScope: 'zone',\n      quality01: deviceQuality(QUALITY_POLICY, WORLD_SEED, temperatureSensorId, SENSOR_BLUEPRINT),\n      condition01: 0.9,\n      powerDraw_W: 0,\n      dutyCycle01: 1,\n      efficiency01: 1,\n      coverage_m2: 0,\n      airflow_m3_per_h: 0,\n      sensibleHeatRemovalCapacity_W: 0,\n      effects: ['sensor'],\n      effectConfigs: {\n        sensor: { measurementType: 'temperature', noise01: 0.05 }\n      }\n    } satisfies ZoneDeviceInstance;\n\n    const humiditySensor: ZoneDeviceInstance = {\n      id: humiditySensorId,\n      slug: 'humidity-probe',\n      name: 'Humidity Probe',\n      blueprintId: SENSOR_BLUEPRINT.id,\n      placementScope: 'zone',\n      quality01: deviceQuality(QUALITY_POLICY, WORLD_SEED, humiditySensorId, SENSOR_BLUEPRINT),\n      condition01: 0.8,\n      powerDraw_W: 0,\n      dutyCycle01: 1,\n      efficiency01: 1,\n      coverage_m2: 0,\n      airflow_m3_per_h: 0,\n      sensibleHeatRemovalCapacity_W: 0,\n      effects: ['sensor'],\n      effectConfigs: {\n        sensor: { measurementType: 'humidity', noise01: 0.1 }\n      }\n    } satisfies ZoneDeviceInstance;\n\n    zone.devices = [temperatureSensor, humiditySensor];\n\n    const readingsByDevice = new Map<Uuid, SensorReading<number>[]>();\n    const ctx: EngineRunContext = {\n      instrumentation: {\n        onStageComplete(stage) {\n          if (stage !== 'applySensors') {\n            return;\n          }\n\n          const runtime = getSensorReadingsRuntime(ctx);\n\n          if (!runtime) {\n            return;\n          }\n\n          for (const [deviceId, readings] of runtime.deviceSensorReadings.entries()) {\n            readingsByDevice.set(deviceId, readings.slice());\n          }\n        }\n      }\n    };\n\n    runTick(world, ctx);\n\n    expect(readingsByDevice.size).toBe(2);\n    const temperatureReading = readingsByDevice.get(temperatureSensorId)?.[0];\n    const humidityReading = readingsByDevice.get(humiditySensorId)?.[0];\n\n    expect(temperatureReading?.measuredValue).toBeDefined();\n    expect(temperatureReading?.measurementType).toBe('temperature');\n    expect(humidityReading?.measuredValue).toBeDefined();\n    expect(humidityReading?.measurementType).toBe('humidity');\n  });\n\n  it('produces error telemetry when noise is applied', () => {\n    const world = createDemoWorld();\n    const zone = world.company.structures[0].rooms[0].zones[0];\n\n    const sensorId = uuid('40000000-0000-0000-0000-000000000017');\n    zone.devices = [\n      {\n        id: sensorId,\n        slug: 'noisy-temp-sensor',\n        name: 'Noisy Temp Sensor',\n        blueprintId: SENSOR_BLUEPRINT.id,\n        placementScope: 'zone',\n        quality01: deviceQuality(QUALITY_POLICY, WORLD_SEED, sensorId, SENSOR_BLUEPRINT),\n        condition01: 0.5,\n        powerDraw_W: 0,\n        dutyCycle01: 1,\n        efficiency01: 1,\n        coverage_m2: 0,\n        airflow_m3_per_h: 0,\n        sensibleHeatRemovalCapacity_W: 0,\n        effects: ['sensor'],\n        effectConfigs: {\n          sensor: {\n            measurementType: 'temperature',\n            noise01: 0.4\n          }\n        }\n      } satisfies ZoneDeviceInstance\n    ];\n\n    const errors: number[] = [];\n    const ctx: EngineRunContext = {\n      instrumentation: {\n        onStageComplete(stage) {\n          if (stage !== 'applySensors') {\n            return;\n          }\n\n          const runtime = getSensorReadingsRuntime(ctx);\n          const readings = runtime?.deviceSensorReadings.get(sensorId) ?? [];\n\n          if (readings[0]) {\n            errors.push(readings[0].error);\n          }\n        }\n      }\n    };\n\n    runTick(world, ctx);\n\n    expect(errors[0]).toBeGreaterThan(0);\n  });\n\n  it('yields exact readings when noise is zero regardless of condition', () => {\n    const world = createDemoWorld();\n    const zone = world.company.structures[0].rooms[0].zones[0];\n\n    zone.devices = [\n      {\n        id: uuid('40000000-0000-0000-0000-000000000014'),\n        slug: 'ppfd-sensor',\n        name: 'PPFD Sensor',\n        blueprintId: SENSOR_BLUEPRINT.id,\n        placementScope: 'zone',\n        quality01: 1,\n        condition01: 0.2,\n        powerDraw_W: 0,\n        dutyCycle01: 1,\n        efficiency01: 1,\n        coverage_m2: 0,\n        airflow_m3_per_h: 0,\n        sensibleHeatRemovalCapacity_W: 0,\n        effects: ['sensor'],\n        effectConfigs: {\n          sensor: {\n            measurementType: 'ppfd',\n            noise01: 0\n          }\n        }\n      } satisfies ZoneDeviceInstance\n    ];\n\n    const ctx: EngineRunContext = {\n      instrumentation: {\n        onStageComplete(stage) {\n          if (stage !== 'applySensors') {\n            return;\n          }\n\n          const runtime = getSensorReadingsRuntime(ctx);\n          const readings = runtime?.deviceSensorReadings.values().next().value;\n\n          if (readings?.[0]) {\n            expect(readings[0].measuredValue).toBe(zone.ppfd_umol_m2s);\n            expect(readings[0].error).toBe(0);\n            expect(readings[0].noiseSample).toBe(0);\n            expect(readings[0].trueValue).toBe(zone.ppfd_umol_m2s);\n          }\n        }\n      }\n    };\n\n    runTick(world, ctx);\n  });\n\n  it('produces deterministic readings for the same seed', () => {\n    const firstWorld = createDemoWorld();\n    const secondWorld = createDemoWorld();\n\n    const sensorBlueprint: DeviceBlueprint = {\n      ...SENSOR_BLUEPRINT,\n      slug: 'deterministic-sensor'\n    };\n\n    const firstZone = firstWorld.company.structures[0].rooms[0].zones[0];\n    const secondZone = secondWorld.company.structures[0].rooms[0].zones[0];\n\n    const sensorId = uuid('40000000-0000-0000-0000-000000000015');\n    const buildSensor = (id: Uuid): ZoneDeviceInstance => ({\n      id,\n      slug: sensorBlueprint.slug,\n      name: sensorBlueprint.name,\n      blueprintId: sensorBlueprint.id,\n      placementScope: 'zone',\n      quality01: deviceQuality(QUALITY_POLICY, WORLD_SEED, id, sensorBlueprint),\n      condition01: 0.7,\n      powerDraw_W: 0,\n      dutyCycle01: 1,\n      efficiency01: 1,\n      coverage_m2: 0,\n      airflow_m3_per_h: 0,\n      sensibleHeatRemovalCapacity_W: 0,\n      effects: ['sensor'],\n      effectConfigs: {\n        sensor: {\n          measurementType: 'temperature',\n          noise01: 0.2\n        }\n      }\n    });\n\n    firstZone.devices = [buildSensor(sensorId)];\n    secondZone.devices = [buildSensor(sensorId)];\n\n    const readingsA = runSensorTick(firstWorld, sensorId);\n    const readingsB = runSensorTick(secondWorld, sensorId);\n\n    expect(readingsA).toHaveLength(1);\n    expect(readingsB).toHaveLength(1);\n    expect(readingsA[0]?.measuredValue).toBe(readingsB[0]?.measuredValue);\n    expect(readingsA[0]?.error).toBe(readingsB[0]?.error);\n    expect(readingsA[0]?.noiseSample).toBe(readingsB[0]?.noiseSample);\n    expect(readingsA[0]?.sampledAtSimTimeHours).toBe(readingsB[0]?.sampledAtSimTimeHours);\n  });\n\n  it('changes sensor readings when the device id changes', () => {\n    const firstWorld = createDemoWorld();\n    const secondWorld = createDemoWorld();\n\n    const sensorBlueprint: DeviceBlueprint = {\n      ...SENSOR_BLUEPRINT,\n      slug: 'deterministic-sensor'\n    };\n\n    const firstZone = firstWorld.company.structures[0].rooms[0].zones[0];\n    const secondZone = secondWorld.company.structures[0].rooms[0].zones[0];\n\n    const sensorIdA = uuid('40000000-0000-0000-0000-000000000015');\n    const sensorIdB = uuid('40000000-0000-0000-0000-000000000016');\n\n    const buildSensor = (id: Uuid): ZoneDeviceInstance => ({\n      id,\n      slug: sensorBlueprint.slug,\n      name: sensorBlueprint.name,\n      blueprintId: sensorBlueprint.id,\n      placementScope: 'zone',\n      quality01: deviceQuality(QUALITY_POLICY, WORLD_SEED, id, sensorBlueprint),\n      condition01: 0.7,\n      powerDraw_W: 0,\n      dutyCycle01: 1,\n      efficiency01: 1,\n      coverage_m2: 0,\n      airflow_m3_per_h: 0,\n      sensibleHeatRemovalCapacity_W: 0,\n      effects: ['sensor'],\n      effectConfigs: {\n        sensor: {\n          measurementType: 'temperature',\n          noise01: 0.2\n        }\n      }\n    });\n\n    firstZone.devices = [buildSensor(sensorIdA)];\n    secondZone.devices = [buildSensor(sensorIdB)];\n\n    const readingsA = runSensorTick(firstWorld, sensorIdA);\n    const readingsB = runSensorTick(secondWorld, sensorIdB);\n\n    expect(readingsA).toHaveLength(1);\n    expect(readingsB).toHaveLength(1);\n    expect(readingsA[0]?.measuredValue).not.toBe(readingsB[0]?.measuredValue);\n    expect(readingsA[0]?.error).not.toBe(readingsB[0]?.error);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\timeProgression.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\workforceTraits.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\pipeline\\zoneCapacity.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\reporting\\seedToHarvest.report.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\saveLoad\\saveLoad.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":63,"column":22,"nodeType":"TSAsExpression","messageId":"neverNullish","endLine":63,"endColumn":62}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'node:fs/promises';\nimport { tmpdir } from 'node:os';\nimport path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nimport { describe, expect, it, vi } from 'vitest';\n\nimport { hashCanonicalJson } from '@/shared/determinism/hash';\nimport {\n  CURRENT_SAVE_SCHEMA_VERSION,\n  createDefaultSaveGameMigrationRegistry,\n  loadSaveGame\n} from '@/backend/src/saveLoad/index';\n\nconst fixtureDir = fileURLToPath(new URL('../../fixtures/save/', import.meta.url));\n\nfunction resolveFixture(...segments: string[]): string {\n  return path.join(fixtureDir, ...segments);\n}\n\nasync function writeTempSave(data: unknown): Promise<string> {\n  const dir = await fs.mkdtemp(path.join(tmpdir(), 'wb-save-load-'));\n  const filePath = path.join(dir, 'save.json');\n  await fs.writeFile(filePath, `${JSON.stringify(data, null, 2)}\\n`, 'utf8');\n  return filePath;\n}\n\ndescribe('save/load integration', () => {\n  it('loads the current schema fixture without migration', async () => {\n    const filePath = resolveFixture('v1', 'basic.json');\n    const save = await loadSaveGame(filePath);\n\n    expect(save.schemaVersion).toBe(CURRENT_SAVE_SCHEMA_VERSION);\n\n    const expected = JSON.parse(await fs.readFile(filePath, 'utf8')) as unknown;\n    await expect(hashCanonicalJson(save)).resolves.toBe(await hashCanonicalJson(expected));\n  });\n\n  it('migrates a legacy save fixture to the current schema', async () => {\n    const legacyPath = resolveFixture('v0', 'basic.json');\n    const currentPath = resolveFixture('v1', 'basic.json');\n    const registry = createDefaultSaveGameMigrationRegistry();\n\n    const migrated = await loadSaveGame(legacyPath, { migrations: registry });\n    const current = await loadSaveGame(currentPath, { migrations: registry });\n\n    expect(migrated).toEqual(current);\n    await expect(hashCanonicalJson(migrated)).resolves.toBe(await hashCanonicalJson(current));\n  });\n\n  it('rejects a save file with a corrupt schemaVersion header', async () => {\n    const filePath = await writeTempSave({ schemaVersion: 'banana' });\n\n    await expect(loadSaveGame(filePath)).rejects.toThrow(/schemaVersion/);\n  });\n\n  it('rejects saves missing company.structures', async () => {\n    const baseline = JSON.parse(await fs.readFile(resolveFixture('v1', 'basic.json'), 'utf8')) as Record<\n      string,\n      unknown\n    >;\n    const world = baseline.world as Record<string, unknown>;\n    const company = (world.company as Record<string, unknown>) ?? {};\n    delete company.structures;\n    world.company = company;\n\n    const filePath = await writeTempSave(baseline);\n\n    await expect(loadSaveGame(filePath)).rejects.toThrow(/company\\.structures/);\n  });\n\n  it('does not invoke migrations when loading a current schema save', async () => {\n    const filePath = resolveFixture('v1', 'basic.json');\n    const registry = createDefaultSaveGameMigrationRegistry();\n    const spy = vi.spyOn(registry, 'migrate');\n\n    const save = await loadSaveGame(filePath, { migrations: registry });\n\n    expect(save.schemaVersion).toBe(CURRENT_SAVE_SCHEMA_VERSION);\n    expect(spy).not.toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\simConstants.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\tariffs.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\workforce\\hiringMarket.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\integration\\workforce\\workforceScheduling.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\runtime\\importResolution.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `PathLike`.","line":85,"column":33,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":85,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":88,"column":31,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":88,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":92,"column":53,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":92,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `PathLike`.","line":98,"column":33,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":98,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":106,"column":32,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":106,"endColumn":41}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it } from \"vitest\";\nimport { readdir, readFile } from \"node:fs/promises\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\n\nconst testModuleDir = path.dirname(fileURLToPath(import.meta.url));\nconst engineSourceRoot = fileURLToPath(\n  new URL(\"../../src/backend/src/\", import.meta.url)\n);\nconst enginePackageRoot = fileURLToPath(new URL(\"../../\", import.meta.url));\nconst engineSrcRoot = fileURLToPath(new URL(\"../../src/\", import.meta.url));\nconst engineTestsRoot = fileURLToPath(new URL(\"../\", import.meta.url));\n\nconst pipelineDir = fileURLToPath(\n  new URL(\"../../src/backend/src/engine/pipeline/\", import.meta.url)\n);\nconst domainSchemasDir = fileURLToPath(\n  new URL(\"../../src/backend/src/domain/schemas/\", import.meta.url)\n);\n\nconst EXTRA_FILES = [\n  path.join(engineSourceRoot, \"domain\", \"schemas.ts\")\n];\n\nconst entrypoints = await collectEntrypoints();\n\ndescribe(\"import resolution guardrail\", () => {\n  for (const entrypoint of entrypoints) {\n    it(`dynamically imports ${entrypoint.label}`, async () => {\n      await expect(import(entrypoint.specifier)).resolves.toBeDefined();\n    });\n  }\n});\n\ndescribe(\"JSON import attributes\", () => {\n  it(\"requires Node.js 22 import attributes on JSON imports\", async () => {\n    const roots = [engineSrcRoot, engineTestsRoot];\n    const jsonImportPattern = /import[\\s\\S]*?from\\s+['\"][^'\"]+\\.json['\"][\\s\\S]*?;/g;\n    const attributePattern = /with\\s*\\{\\s*type\\s*:\\s*['\"]json['\"]\\s*\\}/;\n\n    const violations: string[] = [];\n\n    for (const root of roots) {\n      const files = await collectTsFilesRecursive(root);\n\n      for (const filePath of files) {\n        const source = await readFile(filePath, \"utf8\");\n\n        for (const match of source.matchAll(jsonImportPattern)) {\n          if (!attributePattern.test(match[0])) {\n            const relativePath = path.relative(enginePackageRoot, filePath);\n            const snippet = match[0]\n              .replace(/\\s+/g, \" \")\n              .trim()\n              .slice(0, 160);\n            violations.push(`${relativePath}: ${snippet}`);\n          }\n        }\n      }\n    }\n\n    expect(violations).toEqual([]);\n  });\n});\n\nasync function collectEntrypoints() {\n  const files = [\n    ...(await listImmediateTsFiles(pipelineDir)),\n    ...(await listImmediateTsFiles(domainSchemasDir)),\n    ...EXTRA_FILES\n  ];\n\n  const sorted = files\n    .filter((file) => file.endsWith(\".ts\") && !file.endsWith(\".d.ts\"))\n    .sort((a, b) => a.localeCompare(b));\n\n  return sorted.map((filePath) => ({\n    filePath,\n    label: path.relative(engineSourceRoot, filePath),\n    specifier: toImportSpecifier(filePath)\n  }));\n}\n\nasync function listImmediateTsFiles(directory) {\n  const entries = await readdir(directory, { withFileTypes: true });\n  return entries\n    .filter((entry) => entry.isFile() && entry.name.endsWith(\".ts\"))\n    .map((entry) => path.join(directory, entry.name));\n}\n\nfunction toImportSpecifier(absPath) {\n  const relativePath = path.relative(testModuleDir, absPath);\n  const normalized = relativePath.split(path.sep).join(\"/\");\n  return normalized.startsWith(\".\") ? normalized : `./${normalized}`;\n}\n\nasync function collectTsFilesRecursive(directory) {\n  const entries = await readdir(directory, { withFileTypes: true });\n  const files: string[] = [];\n\n  for (const entry of entries) {\n    if (entry.name === \"node_modules\" || entry.name === \"dist\") {\n      continue;\n    }\n\n    const fullPath = path.join(directory, entry.name);\n\n    if (entry.isDirectory()) {\n      files.push(...(await collectTsFilesRecursive(fullPath)));\n      continue;\n    }\n\n    if (entry.isFile() && isTypeScriptSource(entry.name)) {\n      files.push(fullPath);\n    }\n  }\n\n  return files.sort((a, b) => a.localeCompare(b));\n}\n\nfunction isTypeScriptSource(filename: string): boolean {\n  return /\\.(?:[cm]?ts|tsx)$/.test(filename) && !filename.endsWith(\".d.ts\");\n}\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\testUtils\\deviceHelpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\testUtils\\paths.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\testUtils\\strainFixtures.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\createEngineBootstrapConfig.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\cultivation\\methodRuntime.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":111,"column":30,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":111,"endColumn":78},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":146,"column":27,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":146,"endColumn":75}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it } from 'vitest';\n\nimport basicSoilPot from '../../../../../data/blueprints/cultivation-method/basic-soil-pot.json' with { type: 'json' };\nimport pot10L from '../../../../../data/blueprints/container/pot-10l.json' with { type: 'json' };\nimport soilMultiCycle from '../../../../../data/blueprints/substrate/soil-multi-cycle.json' with { type: 'json' };\n\nimport { createDemoWorld } from '@/backend/src/engine/testHarness';\nimport {\n  ensureCultivationTaskRuntime,\n  getCultivationMethodCatalog,\n  scheduleCultivationTasksForZone,\n} from '@/backend/src/cultivation/methodRuntime';\nimport type {\n  EngineRunContext as EngineContext,\n} from '@/backend/src/engine/Engine';\nimport type {\n  Plant,\n  SimulationWorld,\n  WorkforceState,\n  WorkforceTaskDefinition,\n  Zone,\n  Structure,\n  Room,\n  Uuid,\n} from '@/backend/src/domain/world';\n\nfunction createTaskDefinition(taskCode: string): WorkforceTaskDefinition {\n  return {\n    taskCode,\n    description: taskCode,\n    requiredRoleSlug: 'cultivator',\n    requiredSkills: [],\n    priority: 50,\n    costModel: { basis: 'perPlant', laborMinutes: 12 },\n  } satisfies WorkforceTaskDefinition;\n}\n\nfunction cloneWorldWithZone(\n  world: SimulationWorld,\n  zoneUpdater: (zone: Zone) => Zone,\n): { world: SimulationWorld; structure: Structure; room: Room; zone: Zone } {\n  const structure = world.company.structures[0];\n  const room = structure.rooms[0];\n  const zone = room.zones[0];\n  const updatedZone = zoneUpdater(zone);\n  const updatedRoom = { ...room, zones: [updatedZone] } satisfies typeof room;\n  const updatedStructure = { ...structure, rooms: [updatedRoom] } satisfies typeof structure;\n  const updatedCompany = {\n    ...world.company,\n    structures: [updatedStructure],\n  } satisfies typeof world.company;\n  const updatedWorld = {\n    ...world,\n    company: updatedCompany,\n  } satisfies SimulationWorld;\n\n  return {\n    world: updatedWorld,\n    structure: updatedStructure,\n    room: updatedRoom,\n    zone: updatedZone,\n  };\n}\n\ndescribe('cultivation method runtime task scheduling', () => {\n  it('emits sterilisation, disposal, and repot tasks according to policy cycles', () => {\n    let baseWorld = createDemoWorld();\n    baseWorld = {\n      ...baseWorld,\n      simTimeHours: 48,\n    } satisfies SimulationWorld;\n\n    const { world, structure, room, zone } = cloneWorldWithZone(baseWorld, (incomingZone) => {\n      const containerId = pot10L.id as Uuid;\n      const substrateId = soilMultiCycle.id as Uuid;\n      const cultivationMethodId = basicSoilPot.id as Uuid;\n      const plantTemplate: Omit<Plant, 'id'> = {\n        name: 'Test plant',\n        slug: 'test-plant',\n        strainId: '00000000-0000-4000-8000-000000000011' as Uuid,\n        lifecycleStage: 'harvest-ready',\n        ageHours: 720,\n        health01: 0.9,\n        biomass_g: 450,\n        containerId,\n        substrateId,\n        readyForHarvest: false,\n        status: 'harvested',\n        harvestedAt_tick: 47,\n      } satisfies Omit<Plant, 'id'>;\n\n      const plants: Plant[] = [\n        { ...plantTemplate, id: ('00000000-0000-4000-8000-000000000101' as Uuid) },\n        { ...plantTemplate, id: ('00000000-0000-4000-8000-000000000102' as Uuid) },\n      ];\n\n      return {\n        ...incomingZone,\n        cultivationMethodId,\n        containerId,\n        substrateId,\n        plants,\n      } satisfies Zone;\n    });\n\n    const workforceState: WorkforceState = {\n      roles: [],\n      employees: [],\n      taskDefinitions: [\n        createTaskDefinition('cultivation.repot'),\n        createTaskDefinition(soilMultiCycle.reusePolicy.sterilizationTaskCode ?? 'cultivation.substrate.sterilize'),\n        createTaskDefinition('cultivation.substrate.dispose'),\n      ],\n      taskQueue: [],\n      kpis: [],\n      warnings: [],\n      payroll: {\n        dayIndex: 0,\n        totals: { baseMinutes: 0, otMinutes: 0, baseCost: 0, otCost: 0, totalLaborCost: 0 },\n        byStructure: [],\n      },\n      market: { structures: [] },\n    } satisfies WorkforceState;\n\n    const worldWithWorkforce = {\n      ...world,\n      workforce: workforceState,\n    } satisfies SimulationWorld;\n\n    const ctx: EngineContext = {};\n    const runtime = ensureCultivationTaskRuntime(ctx);\n    const catalog = getCultivationMethodCatalog();\n    const currentTick = Math.trunc(worldWithWorkforce.simTimeHours);\n\n    const firstPassTasks = scheduleCultivationTasksForZone({\n      world: worldWithWorkforce,\n      structure,\n      room,\n      zone,\n      workforce: workforceState,\n      runtime,\n      currentTick,\n      methodCatalog: catalog,\n    });\n\n    const steriliseCode = soilMultiCycle.reusePolicy.sterilizationTaskCode ?? 'cultivation.substrate.sterilize';\n    expect(firstPassTasks, 'first harvest schedules sterilisation').toHaveLength(1);\n    expect(firstPassTasks[0]?.taskCode).toBe(steriliseCode);\n\n    // Second cycle should trigger substrate disposal (maxCycles = 2)\n    const secondCyclePlants: Plant[] = zone.plants.map((plant) => ({\n      ...plant,\n      harvestedAt_tick: currentTick,\n    }));\n    const secondCycleZone: Zone = { ...zone, plants: secondCyclePlants } satisfies Zone;\n    const secondCycleWorld = {\n      ...worldWithWorkforce,\n      simTimeHours: worldWithWorkforce.simTimeHours + 1,\n    } satisfies SimulationWorld;\n\n    const secondPassTasks = scheduleCultivationTasksForZone({\n      world: secondCycleWorld,\n      structure,\n      room,\n      zone: secondCycleZone,\n      workforce: workforceState,\n      runtime,\n      currentTick: Math.trunc(secondCycleWorld.simTimeHours),\n      methodCatalog: catalog,\n    });\n\n    expect(secondPassTasks, 'second harvest schedules disposal').toHaveLength(1);\n    expect(secondPassTasks[0]?.taskCode).toBe('cultivation.substrate.dispose');\n\n    // Third cycle should trigger container repot (service life 3) and another sterilisation.\n    const thirdCyclePlants: Plant[] = zone.plants.map((plant) => ({\n      ...plant,\n      harvestedAt_tick: Math.trunc(secondCycleWorld.simTimeHours),\n    }));\n    const thirdCycleZone: Zone = { ...zone, plants: thirdCyclePlants } satisfies Zone;\n    const thirdCycleWorld = {\n      ...secondCycleWorld,\n      simTimeHours: secondCycleWorld.simTimeHours + 1,\n    } satisfies SimulationWorld;\n\n    const thirdPassTasks = scheduleCultivationTasksForZone({\n      world: thirdCycleWorld,\n      structure,\n      room,\n      zone: thirdCycleZone,\n      workforce: workforceState,\n      runtime,\n      currentTick: Math.trunc(thirdCycleWorld.simTimeHours),\n      methodCatalog: catalog,\n    });\n\n    const taskCodes = thirdPassTasks.map((task) => task.taskCode).sort();\n    expect(taskCodes).toEqual(['cultivation.repot', steriliseCode].sort());\n\n    const contexts = thirdPassTasks.map((task) => task.context ?? {});\n    contexts.forEach((context) => {\n      expect(context.zoneId).toBe(zone.id);\n      expect(context.structureId).toBe(structure.id);\n    });\n  });\n});\n\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\data\\blueprintSchemaCoverage.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_context' is defined but never used.","line":72,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_context' is defined but never used.","line":79,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_context' is defined but never used.","line":86,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_context' is defined but never used.","line":94,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_context' is defined but never used.","line":103,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_context' is defined but never used.","line":110,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_context' is defined but never used.","line":118,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":118,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_context' is defined but never used.","line":126,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":126,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_context' is defined but never used.","line":135,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_context' is defined but never used.","line":142,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_context' is defined but never used.","line":149,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_context' is defined but never used.","line":156,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":156,"endColumn":32}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { readdirSync, readFileSync } from 'node:fs';\nimport path from 'node:path';\n\nimport { describe, expect, it } from 'vitest';\n\nimport {\n  parseContainerBlueprint,\n  parseCultivationMethodBlueprint,\n  parseDeviceBlueprint,\n  parseDiseaseBlueprint,\n  parseIrrigationBlueprint,\n  parsePestBlueprint,\n  parsePersonnelRoleBlueprint,\n  parsePersonnelSkillBlueprint,\n  parseRoomPurposeBlueprint,\n  parseStructureBlueprint,\n  parseStrainBlueprint,\n  parseSubstrateBlueprint\n} from '@/backend/src/domain/blueprints/index';\nimport { resolveBlueprintPath } from '../../testUtils/paths.ts';\nimport { fmtNum } from '@/backend/src/util/format.ts';\n\ntype ParserFn = (input: unknown, context: { readonly filePath: string; readonly relativePath: string }) => void;\n\nconst blueprintRoot = resolveBlueprintPath('');\n\nfunction listBlueprintFiles(relativeDir = ''): string[] {\n  const absolute = relativeDir ? path.join(blueprintRoot, relativeDir) : blueprintRoot;\n  const entries = readdirSync(absolute, { withFileTypes: true });\n  const files: string[] = [];\n\n  for (const entry of entries) {\n    const nextRelative = relativeDir ? `${relativeDir}/${entry.name}` : entry.name;\n\n    if (entry.isDirectory()) {\n      files.push(...listBlueprintFiles(nextRelative));\n    } else if (entry.isFile() && entry.name.endsWith('.json')) {\n      files.push(nextRelative);\n    }\n  }\n\n  return files.sort();\n}\n\nfunction readBlueprint(relativePath: string): unknown {\n  const filePath = resolveBlueprintPath(relativePath);\n  const raw = readFileSync(filePath, 'utf8');\n  return JSON.parse(raw) as unknown;\n}\n\nconst substrateSlugRegistry = (() => {\n  const slugs = new Set<string>();\n  const substrateFiles = listBlueprintFiles('substrate');\n\n  for (const relative of substrateFiles) {\n    const filePath = resolveBlueprintPath(relative);\n    const parsed = parseSubstrateBlueprint(readBlueprint(relative), { filePath });\n    slugs.add(parsed.slug);\n  }\n\n  return slugs;\n})();\n\nfunction resolveParser(relativePath: string): { readonly label: string; readonly parse: ParserFn } {\n  const [domain, namespace] = relativePath.split('/');\n  const filePath = resolveBlueprintPath(relativePath);\n\n  switch (domain) {\n    case 'container':\n      return {\n        label: 'container',\n        parse: (input, _context) => {\n          parseContainerBlueprint(input, { filePath });\n        }\n      } satisfies { label: string; parse: ParserFn };\n    case 'cultivation-method':\n      return {\n        label: 'cultivation-method',\n        parse: (input, _context) => {\n          parseCultivationMethodBlueprint(input, { filePath });\n        }\n      } satisfies { label: string; parse: ParserFn };\n    case 'structure':\n      return {\n        label: 'structure',\n        parse: (input, _context) => {\n          parseStructureBlueprint(input, { filePath });\n        }\n      } satisfies { label: string; parse: ParserFn };\n    case 'room':\n      if (namespace === 'purpose') {\n        return {\n          label: 'room.purpose',\n          parse: (input, _context) => {\n            parseRoomPurposeBlueprint(input, { filePath });\n          }\n        } satisfies { label: string; parse: ParserFn };\n      }\n      break;\n    case 'disease':\n      return {\n        label: 'disease',\n        parse: (input, _context) => {\n          parseDiseaseBlueprint(input, { filePath });\n        }\n      } satisfies { label: string; parse: ParserFn };\n    case 'pest':\n      return {\n        label: 'pest',\n        parse: (input, _context) => {\n          parsePestBlueprint(input, { filePath });\n        }\n      } satisfies { label: string; parse: ParserFn };\n    case 'personnel':\n      if (namespace === 'role') {\n        return {\n          label: 'personnel.role',\n          parse: (input, _context) => {\n            parsePersonnelRoleBlueprint(input, { filePath });\n          }\n        } satisfies { label: string; parse: ParserFn };\n      }\n      if (namespace === 'skill') {\n        return {\n          label: 'personnel.skill',\n          parse: (input, _context) => {\n            parsePersonnelSkillBlueprint(input, { filePath });\n          }\n        } satisfies { label: string; parse: ParserFn };\n      }\n      break;\n    case 'device':\n      return {\n        label: 'device',\n        parse: (input, _context) => {\n          parseDeviceBlueprint(input, { filePath });\n        }\n      } satisfies { label: string; parse: ParserFn };\n    case 'irrigation':\n      return {\n        label: 'irrigation',\n        parse: (input, _context) => {\n          parseIrrigationBlueprint(input, { filePath, knownSubstrateSlugs: substrateSlugRegistry });\n        }\n      } satisfies { label: string; parse: ParserFn };\n    case 'strain':\n      return {\n        label: 'strain',\n        parse: (input, _context) => {\n          parseStrainBlueprint(input, { filePath });\n        }\n      } satisfies { label: string; parse: ParserFn };\n    case 'substrate':\n      return {\n        label: 'substrate',\n        parse: (input, _context) => {\n          parseSubstrateBlueprint(input, { filePath });\n        }\n      } satisfies { label: string; parse: ParserFn };\n    default:\n      throw new Error(`No parser registered for blueprint path \"${relativePath}\".`);\n  }\n\n  throw new Error(`Unsupported personnel blueprint namespace in path \"${relativePath}\".`);\n}\n\ninterface StrictCase {\n  readonly label: string;\n  readonly samplePath: string;\n  readonly parse: ParserFn;\n}\n\nconst strictBlueprintCases: readonly StrictCase[] = [\n  {\n    label: 'container',\n    samplePath: 'container/pot-10l.json',\n    parse: (input, ctx) => parseContainerBlueprint(input, { filePath: ctx.filePath })\n  },\n  {\n    label: 'cultivation-method',\n    samplePath: 'cultivation-method/basic-soil-pot.json',\n    parse: (input, ctx) => parseCultivationMethodBlueprint(input, { filePath: ctx.filePath })\n  },\n  {\n    label: 'structure',\n    samplePath: 'structure/shed.json',\n    parse: (input, ctx) => parseStructureBlueprint(input, { filePath: ctx.filePath })\n  },\n  {\n    label: 'room.purpose',\n    samplePath: 'room/purpose/growroom.json',\n    parse: (input, ctx) => parseRoomPurposeBlueprint(input, { filePath: ctx.filePath })\n  },\n  {\n    label: 'disease',\n    samplePath: 'disease/botrytis-gray-mold-bud-rot.json',\n    parse: (input, ctx) => parseDiseaseBlueprint(input, { filePath: ctx.filePath })\n  },\n  {\n    label: 'pest',\n    samplePath: 'pest/aphids.json',\n    parse: (input, ctx) => parsePestBlueprint(input, { filePath: ctx.filePath })\n  },\n  {\n    label: 'personnel.role',\n    samplePath: 'personnel/role/gardener.json',\n    parse: (input, ctx) => parsePersonnelRoleBlueprint(input, { filePath: ctx.filePath })\n  },\n  {\n    label: 'personnel.skill',\n    samplePath: 'personnel/skill/gardening.json',\n    parse: (input, ctx) => parsePersonnelSkillBlueprint(input, { filePath: ctx.filePath })\n  }\n];\n\ndescribe('blueprint schema coverage', () => {\n  it('parses every blueprint using the canonical schemas', () => {\n    const relativePaths = listBlueprintFiles();\n    const summary = new Map<string, number>();\n\n    for (const relative of relativePaths) {\n      const parser = resolveParser(relative);\n      expect(() => { parser.parse(readBlueprint(relative), { filePath: resolveBlueprintPath(relative), relativePath: relative }); })\n        .not.toThrow();\n\n      summary.set(parser.label, (summary.get(parser.label) ?? 0) + 1);\n    }\n\n    const summaryLine = Array.from(summary.entries())\n      .map(([label, count]) => `${label}=${fmtNum(count)}`)\n      .join(', ');\n\n    console.info(`[Blueprint coverage] ${summaryLine}`);\n  });\n\n  describe.each(strictBlueprintCases)('%s strict schema guards', (testCase) => {\n    const filePath = resolveBlueprintPath(testCase.samplePath);\n\n    it('rejects missing required fields', () => {\n      const blueprint = readBlueprint(testCase.samplePath) as Record<string, unknown>;\n      const invalid = { ...blueprint };\n      delete invalid.id;\n\n      expect(() => { testCase.parse(invalid, { filePath, relativePath: testCase.samplePath }); }).toThrow();\n    });\n\n    it('rejects unexpected top-level properties', () => {\n      const blueprint = readBlueprint(testCase.samplePath) as Record<string, unknown>;\n      const invalid = { ...blueprint, __unexpected: true };\n\n      expect(() => { testCase.parse(invalid, { filePath, relativePath: testCase.samplePath }); }).toThrow();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\data\\blueprintTaxonomy.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\device\\condition.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\device\\createDeviceInstance.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\device\\degradation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\HarvestLotSchema.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\InventorySchema.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\blueprintTaxonomyLayout.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\cultivationIrrigationCompatibility.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary optional chain on a non-nullish value.","line":93,"column":43,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":93,"endColumn":45,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[3879,3881],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary optional chain on a non-nullish value.","line":93,"column":53,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":93,"endColumn":55,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[3889,3891],"text":"."},"desc":"Remove unnecessary optional chain"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import path from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nimport { describe, expect, it } from 'vitest';\n\nimport dripInline from '../../../../../data/blueprints/irrigation/drip-inline-fertigation-basic.json' with { type: 'json' };\nimport ebbFlow from '../../../../../data/blueprints/irrigation/ebb-flow-table-small.json' with { type: 'json' };\nimport manualCan from '../../../../../data/blueprints/irrigation/manual-watering-can.json' with { type: 'json' };\nimport topFeed from '../../../../../data/blueprints/irrigation/top-feed-pump-timer.json' with { type: 'json' };\nimport cocoCoir from '../../../../../data/blueprints/substrate/coco-coir.json' with { type: 'json' };\nimport soilMulti from '../../../../../data/blueprints/substrate/soil-multi-cycle.json' with { type: 'json' };\nimport soilSingle from '../../../../../data/blueprints/substrate/soil-single-cycle.json' with { type: 'json' };\nimport basicSoilPot from '../../../../../data/blueprints/cultivation-method/basic-soil-pot.json' with { type: 'json' };\nimport scrog from '../../../../../data/blueprints/cultivation-method/screen-of-green.json' with { type: 'json' };\nimport sog from '../../../../../data/blueprints/cultivation-method/sea-of-green.json' with { type: 'json' };\n\nimport { parseIrrigationBlueprint, type IrrigationBlueprint } from '@/backend/src/domain/world';\n\ntype CultivationBlueprint = typeof basicSoilPot;\n\ndescribe('irrigation compatibility coverage', () => {\n  const substrateSlugs = new Set([\n    cocoCoir.slug,\n    soilMulti.slug,\n    soilSingle.slug\n  ]);\n\nconst irrigationFixtures = [\n  {\n    data: dripInline,\n    path: fileURLToPath(\n      new URL('../../../../../data/blueprints/irrigation/drip-inline-fertigation-basic.json', import.meta.url)\n    )\n  },\n  {\n    data: ebbFlow,\n    path: fileURLToPath(\n      new URL('../../../../../data/blueprints/irrigation/ebb-flow-table-small.json', import.meta.url)\n    )\n  },\n  {\n    data: manualCan,\n    path: fileURLToPath(\n      new URL('../../../../../data/blueprints/irrigation/manual-watering-can.json', import.meta.url)\n    )\n  },\n  {\n    data: topFeed,\n    path: fileURLToPath(\n      new URL('../../../../../data/blueprints/irrigation/top-feed-pump-timer.json', import.meta.url)\n    )\n  }\n] as const;\nconst blueprintsRoot = path.resolve(\n  fileURLToPath(new URL('../../../../../data/blueprints/', import.meta.url))\n);\nconst irrigationBlueprints = irrigationFixtures.map((fixture) =>\n  parseIrrigationBlueprint(fixture.data, {\n    knownSubstrateSlugs: substrateSlugs,\n    filePath: fixture.path,\n    blueprintsRoot\n  })\n);\n\n  const cultivationMethods = [basicSoilPot, scrog, sog] as const satisfies readonly CultivationBlueprint[];\n\n  const compatibilityIndex = new Map<string, IrrigationBlueprint[]>();\n  irrigationBlueprints.forEach((blueprint) => {\n    blueprint.compatibility.substrates.forEach((substrateSlug) => {\n      const existing = compatibilityIndex.get(substrateSlug) ?? [];\n      existing.push(blueprint);\n      compatibilityIndex.set(substrateSlug, existing);\n    });\n  });\n\n  function resolveCompatibleIrrigation(substrateSlug: string): IrrigationBlueprint | undefined {\n    const compatible = compatibilityIndex.get(substrateSlug);\n    return compatible?.[0];\n  }\n\n  it('covers every cultivation substrate with at least one irrigation method', () => {\n    cultivationMethods.forEach((method) => {\n      method.substrates.forEach((substrateSlug: string) => {\n        const compatibleMethods = compatibilityIndex.get(substrateSlug);\n        expect(compatibleMethods, `No irrigation method exposes substrate ${substrateSlug}`).toBeDefined();\n        expect(compatibleMethods?.length ?? 0).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  it('resolves default cultivation substrates to an irrigation method automatically', () => {\n    cultivationMethods.forEach((method) => {\n      const defaultSubstrate = method.meta?.defaults?.substrateSlug as string | undefined;\n      expect(defaultSubstrate, `Cultivation method ${method.slug} is missing a default substrate`).toBeTruthy();\n\n      if (!defaultSubstrate) {\n        return;\n      }\n\n      const resolved = resolveCompatibleIrrigation(defaultSubstrate);\n      expect(resolved, `No irrigation method compatible with ${defaultSubstrate}`).toBeTruthy();\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\deviceBlueprintSchema.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\devicePriceMapSchema.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\irrigationBlueprintSchema.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\irrigationUsage.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\locationIndex.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\schemas.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\strainBlueprintLoader.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StrainBlueprint' is defined but never used.","line":11,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'node:fs';\nimport path from 'node:path';\n\nimport { beforeEach, describe, expect, it, vi } from 'vitest';\n\nimport {\n  clearStrainBlueprintCache,\n  loadAllStrainBlueprints,\n  loadStrainBlueprint\n} from '@/backend/src/domain/blueprints/strainBlueprintLoader';\nimport type { StrainBlueprint } from '@/backend/src/domain/blueprints/strainBlueprint';\nimport type { Uuid } from '@/backend/src/domain/entities';\nimport { resolveBlueprintPath } from '../../testUtils/paths.ts';\nimport {\n  AK47_STRAIN_ID,\n  WHITE_WIDOW_STRAIN_ID\n} from '../../testUtils/strainFixtures.ts';\nimport { expectDefined } from '../../util/expectors';\n\nconst blueprintsRoot = path.resolve(resolveBlueprintPath(''));\n\ndescribe('strainBlueprintLoader', () => {\n  beforeEach(() => {\n    clearStrainBlueprintCache();\n    vi.restoreAllMocks();\n  });\n\n  it('loadAllStrainBlueprints loads all strain blueprints', () => {\n    const blueprints = loadAllStrainBlueprints({ blueprintsRoot });\n\n    expect(blueprints.size).toBeGreaterThanOrEqual(5);\n    const whiteWidow = expectDefined(blueprints.get(WHITE_WIDOW_STRAIN_ID));\n    expect(whiteWidow.slug).toBe('white-widow');\n    expect(whiteWidow.class).toBe('strain');\n  });\n\n  it('loadStrainBlueprint retrieves a specific blueprint', () => {\n    const blueprint = loadStrainBlueprint(WHITE_WIDOW_STRAIN_ID, { blueprintsRoot });\n\n    expect(blueprint).not.toBeNull();\n    expect(blueprint?.name).toBe('White Widow');\n    expect(blueprint?.slug).toBe('white-widow');\n    expect(blueprint?.growthModel).toBeDefined();\n    expect(blueprint?.envBands).toBeDefined();\n  });\n\n  it('loadStrainBlueprint returns null for unknown id', () => {\n    const unknownId = '99999999-9999-9999-9999-999999999999' as Uuid;\n    const blueprint = loadStrainBlueprint(unknownId, { blueprintsRoot });\n\n    expect(blueprint).toBeNull();\n  });\n\n  it('shares cache between loadAllStrainBlueprints calls', () => {\n    const readSpy = vi.spyOn(fs, 'readFileSync');\n\n    const first = loadAllStrainBlueprints({ blueprintsRoot });\n    const initialReads = readSpy.mock.calls.length;\n    const second = loadAllStrainBlueprints({ blueprintsRoot });\n\n    expect(first.size).toBeGreaterThanOrEqual(5);\n    expect(second.size).toBe(first.size);\n    expect(readSpy.mock.calls.length).toBe(initialReads);\n  });\n\n  it('clears cache via clearStrainBlueprintCache', () => {\n    loadAllStrainBlueprints({ blueprintsRoot });\n    clearStrainBlueprintCache();\n\n    const readSpy = vi.spyOn(fs, 'readFileSync');\n    loadAllStrainBlueprints({ blueprintsRoot });\n\n    expect(readSpy).toHaveBeenCalled();\n  });\n\n  it('throws when blueprints root is invalid', () => {\n    expect(() => loadAllStrainBlueprints({ blueprintsRoot: '/invalid/path' })).toThrow();\n  });\n\n  it('loadStrainBlueprint caches individual lookups', () => {\n    const readSpy = vi.spyOn(fs, 'readFileSync');\n\n    const first = expectDefined(loadStrainBlueprint(AK47_STRAIN_ID, { blueprintsRoot }));\n    const afterFirstReads = readSpy.mock.calls.length;\n\n    const second = expectDefined(loadStrainBlueprint(AK47_STRAIN_ID, { blueprintsRoot }));\n    expect(second).toBe(first);\n    expect(readSpy.mock.calls.length).toBe(afterFirstReads);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\strainBlueprintSchema.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":12,"column":7,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":12,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":59,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":59,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .stressTolerance on an `any` value.","line":59,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":59,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":68,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":71,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .growthModel on an `any` value.","line":69,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":69,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":70,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":70,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .growthModel on an `any` value.","line":70,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":70,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":77,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":84,"endColumn":6},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":79,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":83,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .growthModel on an `any` value.","line":80,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":99,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":103,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .growthModel on an `any` value.","line":100,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":114,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":117,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .growthModel on an `any` value.","line":115,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":115,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":124,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":127,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .growthModel on an `any` value.","line":125,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":136,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":136,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phaseDurations on an `any` value.","line":136,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":136,"endColumn":59}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { readFileSync } from 'node:fs';\nimport path from 'node:path';\n\nimport { describe, expect, it } from 'vitest';\n\nimport { parseStrainBlueprint } from '../../../src/backend/src/domain/blueprints/strainBlueprint.ts';\nimport { BlueprintTaxonomyMismatchError } from '../../../src/backend/src/domain/blueprints/taxonomy.ts';\nimport { resolveBlueprintPath } from '../../testUtils/paths.ts';\n\nconst fixturePath = resolveBlueprintPath('strain/white-widow.json');\nconst blueprintsRoot = path.resolve(fixturePath, '..', '..');\nconst fixturePayload = JSON.parse(readFileSync(fixturePath, 'utf8'));\n\ndescribe('strainBlueprintSchema', () => {\n  it('parses the white widow blueprint', () => {\n    const blueprint = parseStrainBlueprint(fixturePayload, {\n      filePath: fixturePath,\n      blueprintsRoot\n    });\n    expect(blueprint.id).toBeDefined();\n    expect(blueprint.slug).toBe('white-widow');\n    expect(blueprint.envBands.default.temp_C?.green).toEqual([21, 26]);\n  });\n\n  it('rejects payloads with missing required fields', () => {\n    expect(() => parseStrainBlueprint({})).toThrow();\n    expect(() => parseStrainBlueprint({ ...fixturePayload, id: undefined })).toThrow();\n    expect(() => parseStrainBlueprint({ ...fixturePayload, slug: 'Invalid Slug' })).toThrow();\n  });\n\n  it('rejects invalid class formats', () => {\n    expect(() =>\n      parseStrainBlueprint(\n        { ...fixturePayload, class: 'strain.hybrid' },\n        { filePath: fixturePath }\n      )\n    ).toThrow();\n    expect(() =>\n      parseStrainBlueprint(\n        { ...fixturePayload, class: 'device.lighting' },\n        { filePath: fixturePath }\n      )\n    ).toThrow();\n  });\n\n  it('validates env bands structure', () => {\n    expect(() =>\n      parseStrainBlueprint({\n        ...fixturePayload,\n        envBands: { default: { temp_C: { green: [25, 20], yellowLow: 18, yellowHigh: 28 } } }\n      })\n    ).toThrow();\n  });\n\n  it('validates stress tolerance positivity', () => {\n    expect(() =>\n      parseStrainBlueprint({\n        ...fixturePayload,\n        stressTolerance: { ...fixturePayload.stressTolerance, temp_C: -1 }\n      })\n    ).toThrow();\n  });\n\n  it('validates growth model structure', () => {\n    expect(() =>\n      parseStrainBlueprint({\n        ...fixturePayload,\n        growthModel: {\n          ...fixturePayload.growthModel,\n          temperature: { ...fixturePayload.growthModel.temperature, min_C: 40 }\n        }\n      })\n    ).toThrow();\n  });\n\n  it('accepts numeric dryMatterFraction and harvestIndex', () => {\n    const payload = {\n      ...fixturePayload,\n      growthModel: {\n        ...fixturePayload.growthModel,\n        dryMatterFraction: 0.3,\n        harvestIndex: 0.65\n      }\n    };\n\n    expect(() =>\n      parseStrainBlueprint(payload, {\n        filePath: fixturePath,\n        blueprintsRoot\n      })\n    ).not.toThrow();\n  });\n\n  it('accepts stage-specific dryMatterFraction and harvestIndex objects', () => {\n    expect(() =>\n      parseStrainBlueprint(\n        {\n          ...fixturePayload,\n          growthModel: {\n            ...fixturePayload.growthModel,\n            dryMatterFraction: { vegetation: 0.25, flowering: 0.2 },\n            harvestIndex: { targetFlowering: 0.7 }\n          }\n        },\n        { filePath: fixturePath, blueprintsRoot }\n      )\n    ).not.toThrow();\n  });\n\n  it('rejects stage fractions outside of [0, 1]', () => {\n    expect(() =>\n      parseStrainBlueprint({\n        ...fixturePayload,\n        growthModel: {\n          ...fixturePayload.growthModel,\n          dryMatterFraction: { vegetation: 1.2 }\n        }\n      })\n    ).toThrow();\n\n    expect(() =>\n      parseStrainBlueprint({\n        ...fixturePayload,\n        growthModel: {\n          ...fixturePayload.growthModel,\n          harvestIndex: { targetFlowering: -0.1 }\n        }\n      })\n    ).toThrow();\n  });\n\n  it('validates phase durations are positive integers', () => {\n    expect(() =>\n      parseStrainBlueprint({\n        ...fixturePayload,\n        phaseDurations: { ...fixturePayload.phaseDurations, seedlingDays: -1 }\n      })\n    ).toThrow();\n  });\n\n  it('validates noise configuration bounds', () => {\n    expect(() =>\n      parseStrainBlueprint({\n        ...fixturePayload,\n        noise: { enabled: true, pct: 1.5 }\n      })\n    ).toThrow();\n  });\n\n  it('validates taxonomy when filePath provided', () => {\n    expect(() =>\n      parseStrainBlueprint(\n        { ...fixturePayload, class: 'strain' },\n        { filePath: fixturePath, blueprintsRoot }\n      )\n    ).not.toThrow();\n  });\n\n  it('throws BlueprintTaxonomyMismatchError when path disagrees', () => {\n    expect(() =>\n      parseStrainBlueprint(fixturePayload, {\n        filePath: path.join(blueprintsRoot, 'device/climate/cool-air-split-3000.json'),\n        blueprintsRoot\n      })\n    ).toThrow(BlueprintTaxonomyMismatchError);\n  });\n\n  it('detects duplicate slugs in registry', () => {\n    const registry = new Map<string, string>();\n    parseStrainBlueprint(fixturePayload, {\n      slugRegistry: registry,\n      filePath: fixturePath,\n      blueprintsRoot\n    });\n\n    expect(() =>\n      parseStrainBlueprint(fixturePayload, {\n        slugRegistry: registry,\n        filePath: fixturePath,\n        blueprintsRoot\n      })\n    ).toThrow();\n  });\n\n  it('accepts unique slugs across multiple parses', () => {\n    const registry = new Map<string, string>();\n    parseStrainBlueprint({ ...fixturePayload, slug: 'strain-a' }, { slugRegistry: registry, blueprintsRoot });\n    expect(() =>\n      parseStrainBlueprint({ ...fixturePayload, slug: 'strain-b' }, { slugRegistry: registry, blueprintsRoot })\n    ).not.toThrow();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\substrateBlueprintSchema.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\substrateUsage.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\validateCompanyWorld.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\domain\\workforceSchemas.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\economy\\cultivationMethodPriceMap.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\economy\\noEconomyPerTickRule.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `Parser`.","line":11,"column":3,"nodeType":"TSAsExpression","messageId":"unsafeArgument","endLine":11,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type error typed assigned to a parameter of type `RuleModule`.","line":13,"column":49,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":13,"endColumn":69},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":35,"column":56,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":35,"endColumn":58,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1080,1086],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async arrow function has no 'await' expression.","line":48,"column":57,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":48,"endColumn":59,"suggestions":[{"messageId":"removeAsync","fix":{"range":[1477,1483],"text":""},"desc":"Remove 'async'."}]}],"suppressedMessages":[{"ruleId":"wb-sim/no-economy-per-tick","severity":2,"message":"Economy identifiers must not use \"*_per_tick\" units. Use per-hour (or documented SEC units) for monetary values.","line":36,"column":27,"nodeType":"TemplateElement","messageId":"monetaryPerTick","endLine":40,"endColumn":6,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable wb-sim/no-economy-per-tick */\nimport { parser as typescriptEslintParser } from 'typescript-eslint';\nimport { Linter } from 'eslint';\nimport { describe, expect, it } from 'vitest';\n\nimport { noEconomyPerTickRule } from '../../../../../tools/eslint/rules/no-economy-per-tick';\n\nconst linter = new Linter({ configType: 'eslintrc' });\nlinter.defineParser(\n  '@typescript-eslint/parser',\n  typescriptEslintParser as unknown as Linter.ParserModule\n);\nlinter.defineRule('wb-sim/no-economy-per-tick', noEconomyPerTickRule);\n\nfunction lint(code: string) {\n  const messages = linter.verify(\n    code,\n    {\n      parser: '@typescript-eslint/parser',\n      parserOptions: {\n        ecmaVersion: 2022,\n        sourceType: 'module'\n      },\n      rules: {\n        'wb-sim/no-economy-per-tick': 'error'\n      }\n    },\n    { filename: 'packages/engine/src/economy/example.ts' }\n  );\n\n  return messages.map((message) => ({ ruleId: message.ruleId, message: message.message }));\n}\n\ndescribe('no-economy-per-tick ESLint rule', () => {\n  it('flags monetary *_per_tick identifiers', async () => {\n    const messages = lint(`\n      const maintenanceCost_per_tick = 4;\n      const pricing = { energy_cost_per_tick_cc: 2 };\n      interface Ledger { wage_per_tick: number }\n    `);\n\n    expect(messages).toHaveLength(3);\n    for (const message of messages) {\n      expect(message.ruleId).toBe('wb-sim/no-economy-per-tick');\n    }\n  });\n\n  it('allows physical *_per_tick identifiers', async () => {\n    const messages = lint(`\n      const co2Pulse = { pulse_ppm_per_tick: 120 };\n      const humidity = zone.humidity_change_per_tick;\n    `);\n\n    expect(messages).toHaveLength(0);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\economy\\runtime.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\economy\\tariffsContext.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\engine\\pipeline\\applyDeviceEffects.invariants.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\engine\\pipeline\\applyHarvestAndInventory.unit.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\engine\\trace.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\health\\pestDiseaseRisk.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\perf\\perfBudget.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\physiology\\stressCurves.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\physiology\\vpd.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\readmodels\\structureTariffs.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\save\\saveSchema.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\save\\writeSaveGame.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\sensors\\noise.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\sensors\\schema.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\services\\storage\\resolveStorageRoom.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":88,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":88,"endColumn":99}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it } from 'vitest';\n\nimport { resolveStorageRoomForStructure } from '@/backend/src/services/storage/resolveStorageRoom';\nimport { createDemoWorld } from '@/backend/src/engine/testHarness';\nimport type { Room } from '@/backend/src/domain/world';\n\ntype Mutable<T> = { -readonly [K in keyof T]: T[K] };\n\ndescribe('resolveStorageRoomForStructure', () => {\n  it('resolves a storage room by class', () => {\n    const world = createDemoWorld();\n    const structure = world.company.structures[0];\n\n    const result = resolveStorageRoomForStructure(structure.id, world);\n\n    expect(result.ok).toBe(true);\n    if (!result.ok) {\n      return;\n    }\n\n    expect(result.room.class).toBe('room.storage');\n  });\n\n  it('resolves a storage room by storage tag when class is missing', () => {\n    const world = createDemoWorld();\n    const structure = world.company.structures[0];\n    const storageRoom = structure.rooms.find((room) => room.class === 'room.storage');\n\n    if (!storageRoom) {\n      throw new Error('Expected demo world to include a storage room');\n    }\n\n    const mutableRoom = storageRoom as Mutable<Room>;\n    mutableRoom.class = undefined;\n    mutableRoom.tags = ['storage'];\n\n    const result = resolveStorageRoomForStructure(structure.id, world);\n\n    expect(result.ok).toBe(true);\n    if (!result.ok) {\n      return;\n    }\n\n    expect(result.room.tags).toContain('storage');\n  });\n\n  it('returns not_found when no storage room is available', () => {\n    const world = createDemoWorld();\n    const structure = world.company.structures[0];\n    const storageRoom = structure.rooms.find((room) => room.class === 'room.storage');\n\n    if (!storageRoom) {\n      throw new Error('Expected demo world to include a storage room');\n    }\n\n    const mutableRoom = storageRoom as Mutable<Room>;\n    mutableRoom.class = undefined;\n    mutableRoom.tags = [];\n\n    const result = resolveStorageRoomForStructure(structure.id, world);\n\n    expect(result).toEqual({ ok: false, reason: 'not_found', candidates: [] });\n  });\n\n  it('returns ambiguous when multiple storage rooms are present', () => {\n    const world = createDemoWorld();\n    const structure = world.company.structures[0];\n    const storageRoom = structure.rooms.find((room) => room.class === 'room.storage');\n\n    if (!storageRoom) {\n      throw new Error('Expected demo world to include a storage room');\n    }\n\n    const mutableStructure = structure as Mutable<typeof structure>;\n    mutableStructure.rooms = [\n      ...structure.rooms,\n      {\n        ...storageRoom,\n        id: '00000000-0000-0000-0000-00000000ffff' as Room['id']\n      }\n    ];\n\n    const result = resolveStorageRoomForStructure(structure.id, world);\n\n    expect(result).toEqual({\n      ok: false,\n      reason: 'ambiguous',\n      candidates: expect.arrayContaining([storageRoom.id, '00000000-0000-0000-0000-00000000ffff'])\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\services\\workforce\\identitySource.test.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'json' has no 'await' expression.","line":23,"column":9,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":23,"endColumn":21,"suggestions":[{"messageId":"removeAsync","fix":{"range":[995,1001],"text":""},"desc":"Remove 'async'."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":65,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":65,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .signal on an `any` value.","line":65,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":65,"endColumn":21}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { afterEach, describe, expect, it, vi } from 'vitest';\n\nimport type { EmployeeRngSeedUuid } from '@/backend/src/domain/workforce/Employee';\nimport { getTraitMetadata } from '@/backend/src/domain/workforce/traits';\nimport { resolveWorkforceIdentity } from '@/backend/src/services/workforce/identitySource';\n\ndescribe('resolveWorkforceIdentity', () => {\n  const ONLINE_SEED = 'online-seed';\n  const RNG_SEED_ALPHA = '018f29ce-0000-7000-8000-0000000000a1' as EmployeeRngSeedUuid;\n  const RNG_SEED_BRAVO = '018f29ce-0000-7000-8000-0000000000b2' as EmployeeRngSeedUuid;\n  const RNG_SEED_CHARLIE = '018f29ce-0000-7000-8000-0000000000c3' as EmployeeRngSeedUuid;\n\n  afterEach(() => {\n    vi.useRealTimers();\n    vi.restoreAllMocks();\n    vi.unstubAllGlobals();\n  });\n\n  it('returns identity from randomuser when the HTTP request succeeds', async () => {\n    const fetchMock = vi.fn<Parameters<typeof fetch>, ReturnType<typeof fetch>>(() =>\n      Promise.resolve({\n        ok: true,\n        json: async () => ({\n          results: [\n            {\n              gender: 'male',\n              name: { first: 'Jordan', last: 'Rivera' },\n            },\n          ],\n        }),\n      } as unknown as Response),\n    );\n\n    vi.stubGlobal('fetch', fetchMock as unknown as typeof fetch);\n\n    const identity = await resolveWorkforceIdentity({\n      randomUserSeed: ONLINE_SEED,\n      rngSeedUuid: RNG_SEED_ALPHA,\n    });\n\n    expect(fetchMock).toHaveBeenCalledTimes(1);\n    const requestUrl = fetchMock.mock.calls[0][0] as URL;\n    expect(requestUrl).toBeInstanceOf(URL);\n    expect(requestUrl.searchParams.get('seed')).toBe(ONLINE_SEED);\n    expect(requestUrl.searchParams.get('inc')).toBe('gender,name');\n    expect(requestUrl.searchParams.get('noinfo')).toBe('true');\n\n    expect(identity).toMatchObject({\n      firstName: 'Jordan',\n      lastName: 'Rivera',\n      gender: 'm',\n      source: 'randomuser',\n    });\n\n    expect(identity.traits.length).toBeGreaterThanOrEqual(1);\n    expect(identity.traits.length).toBeLessThanOrEqual(2);\n    for (const trait of identity.traits) {\n      expect(getTraitMetadata(trait.id)).toBeDefined();\n    }\n  });\n\n  it('falls back to pseudodata when the randomuser request times out', async () => {\n    const fetchMock = vi.fn<Parameters<typeof fetch>, ReturnType<typeof fetch>>((_, init) =>\n      new Promise((_, reject) => {\n        init?.signal?.addEventListener('abort', () => {\n          reject(new DOMException('aborted', 'AbortError'));\n        });\n      }),\n    );\n\n    vi.stubGlobal('fetch', fetchMock as unknown as typeof fetch);\n    vi.useFakeTimers();\n\n    const identityPromise = resolveWorkforceIdentity({\n      randomUserSeed: ONLINE_SEED,\n      rngSeedUuid: RNG_SEED_BRAVO,\n    });\n\n    await vi.advanceTimersByTimeAsync(600);\n    const identity = await identityPromise;\n\n    expect(identity).toMatchObject({ source: 'fallback' });\n    expect(identity.traits.length).toBeGreaterThanOrEqual(1);\n    expect(identity.traits.length).toBeLessThanOrEqual(2);\n    for (const trait of identity.traits) {\n      expect(getTraitMetadata(trait.id)).toBeDefined();\n    }\n  });\n\n  it('uses deterministic pseudodata when the HTTP request fails', async () => {\n    const fetchMock = vi.fn<Parameters<typeof fetch>, ReturnType<typeof fetch>>(() =>\n      Promise.reject(new Error('network unavailable')),\n    );\n\n    vi.stubGlobal('fetch', fetchMock as unknown as typeof fetch);\n\n    const identity = await resolveWorkforceIdentity({\n      randomUserSeed: 'unused-seed',\n      rngSeedUuid: RNG_SEED_CHARLIE,\n    });\n\n    expect(identity).toMatchObject({ source: 'fallback' });\n    expect(identity.traits.length).toBeGreaterThanOrEqual(1);\n    expect(identity.traits.length).toBeLessThanOrEqual(2);\n    for (const trait of identity.traits) {\n      expect(getTraitMetadata(trait.id)).toBeDefined();\n    }\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\services\\workforce\\market.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":20,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":20,"endColumn":69}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it } from 'vitest';\n\nimport {\n  performMarketHire,\n  performMarketScan,\n  type PerformMarketHireOptions,\n  type PerformMarketScanOptions,\n} from '@/backend/src/services/workforce/market';\nimport { HOURS_PER_DAY } from '@/backend/src/constants/simConstants';\nimport type {\n  EmployeeRole,\n  WorkforceMarketState,\n  WorkforceState,\n} from '@/backend/src/domain/workforce/WorkforceState';\nimport type { WorkforceConfig } from '@/backend/src/config/workforce';\nimport { expectDefined } from '../../../util/expectors';\n\nconst baseRoles: EmployeeRole[] = [\n  {\n    id: '00000000-0000-0000-0000-00000000role' as EmployeeRole['id'],\n    slug: 'gardener',\n    name: 'Gardener',\n    coreSkills: [\n      { skillKey: 'gardening', minSkill01: 0.4 },\n      { skillKey: 'cleanliness', minSkill01: 0.3 },\n    ],\n  },\n];\n\nconst baseConfig: WorkforceConfig['market'] = {\n  scanCooldown_days: 30,\n  poolSize: 4,\n  scanCost_cc: 1000,\n};\n\nfunction createMarketState(): WorkforceMarketState {\n  return { structures: [] } satisfies WorkforceMarketState;\n}\n\ndescribe('workforce market services', () => {\n  it('generates deterministic candidate pools for identical seeds and counters', () => {\n    const options: PerformMarketScanOptions = {\n      market: createMarketState(),\n      config: baseConfig,\n      worldSeed: 'seed-123',\n      structureId: '00000000-0000-0000-0000-000000000100' as WorkforceState['employees'][number]['assignedStructureId'],\n      currentSimHours: 0,\n      roles: baseRoles,\n    } satisfies PerformMarketScanOptions;\n\n    const first = performMarketScan(options);\n    const second = performMarketScan(options);\n\n    expect(first.didScan).toBe(true);\n    expect(second.didScan).toBe(true);\n    expect(first.pool).toEqual(second.pool);\n  });\n\n  it('respects scan cooldowns before generating a new pool', () => {\n    const structureId = '00000000-0000-0000-0000-000000000200' as WorkforceState['employees'][number]['assignedStructureId'];\n    const initial = performMarketScan({\n      market: createMarketState(),\n      config: baseConfig,\n      worldSeed: 'seed-200',\n      structureId,\n      currentSimHours: 0,\n      roles: baseRoles,\n    });\n\n    expect(initial.didScan).toBe(true);\n    const market = initial.market;\n\n    const second = performMarketScan({\n      market,\n      config: baseConfig,\n      worldSeed: 'seed-200',\n      structureId,\n      currentSimHours: 10 * HOURS_PER_DAY,\n      roles: baseRoles,\n    });\n\n    expect(second.didScan).toBe(false);\n    expect(second.market).toEqual(market);\n  });\n\n  it('removes hired candidates from the market pool', () => {\n    const structureId = '00000000-0000-0000-0000-000000000300' as WorkforceState['employees'][number]['assignedStructureId'];\n    const scan = performMarketScan({\n      market: createMarketState(),\n      config: baseConfig,\n      worldSeed: 'seed-300',\n      structureId,\n      currentSimHours: 0,\n      roles: baseRoles,\n    });\n\n    const candidate = expectDefined(scan.pool?.[0]);\n\n    const hireOptions: PerformMarketHireOptions = {\n      market: scan.market,\n      structureId,\n      candidateId: candidate.id,\n    } satisfies PerformMarketHireOptions;\n\n    const hire = performMarketHire(hireOptions);\n    const hiredCandidate = expectDefined(hire.candidate);\n    expect(hiredCandidate.id).toBe(candidate.id);\n\n    const structure = expectDefined(hire.market.structures[0]);\n    expect(structure.pool).not.toContain(candidate);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\services\\workforce\\raises.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-parameters","severity":2,"message":"Type parameter T is used only once in the function signature.","line":18,"column":31,"nodeType":"TSTypeParameter","messageId":"sole","endLine":18,"endColumn":47,"suggestions":[{"messageId":"replaceUsagesWithConstraint","fix":{"range":[464,527],"text":"(\n  source: Record<string, unknown>,\n  key: string"},"desc":"Replace all usages of type parameter with its constraint."}]},{"ruleId":"@typescript-eslint/no-unnecessary-type-parameters","severity":2,"message":"Type parameter T is used only once in the function signature.","line":31,"column":31,"nodeType":"TSTypeParameter","messageId":"sole","endLine":31,"endColumn":47,"suggestions":[{"messageId":"replaceUsagesWithConstraint","fix":{"range":[817,880],"text":"(\n  source: Record<string, unknown>,\n  key: string"},"desc":"Replace all usages of type parameter with its constraint."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it } from 'vitest';\n\nimport {\n  applyRaiseIntent,\n  createInitialRaiseState,\n  RAISE_COOLDOWN_DAYS,\n  RAISE_MIN_EMPLOYMENT_DAYS,\n} from '@/backend/src/services/workforce/raises';\nimport { createRng } from '@/backend/src/util/rng';\nimport type { Employee, WorkforceRaiseIntent } from '@/backend/src/domain/world';\nimport {\n  expectDefined,\n  asObject,\n  hasKey,\n  toNumber,\n} from '../../../util/expectors';\n\nfunction expectObjectProperty<T extends string>(\n  source: Record<string, unknown>,\n  key: T,\n): Record<string, unknown> {\n  const hasProperty = hasKey(source, key);\n  expect(hasProperty).toBe(true);\n  if (!hasProperty) {\n    throw new Error(`Expected property \"${key}\" to be present on object.`);\n  }\n\n  return expectDefined(asObject(source[key]));\n}\n\nfunction expectNumberProperty<T extends string>(\n  source: Record<string, unknown>,\n  key: T,\n): number {\n  const hasProperty = hasKey(source, key);\n  expect(hasProperty).toBe(true);\n  if (!hasProperty) {\n    throw new Error(`Expected numeric property \"${key}\" to be present on object.`);\n  }\n\n  return toNumber(source[key]);\n}\n\nfunction createEmployee(overrides: Partial<Employee> = {}): Employee {\n  const base: Employee = {\n    id: '00000000-0000-0000-0000-00000000aaaa' as Employee['id'],\n    name: 'Cadence Tester',\n    roleId: '00000000-0000-0000-0000-00000000bbbb' as Employee['roleId'],\n    rngSeedUuid: '018f43f1-8b44-7b74-b3ce-5fbd7be3c201',\n    assignedStructureId: '00000000-0000-0000-0000-00000000cccc' as Employee['assignedStructureId'],\n    morale01: 0.7,\n    fatigue01: 0.2,\n    skills: [{ skillKey: 'analysis', level01: 0.6 }],\n    skillTriad: {\n      main: { skillKey: 'analysis', level01: 0.6 },\n      secondary: [\n        { skillKey: 'communication', level01: 0.4 },\n        { skillKey: 'operations', level01: 0.3 },\n      ],\n    },\n    traits: [],\n    schedule: {\n      hoursPerDay: 8,\n      overtimeHoursPerDay: 1,\n      daysPerWeek: 5,\n      shiftStartHour: 8,\n    },\n    baseRateMultiplier: 1,\n    experience: { hoursAccrued: 0, level01: 0 },\n    laborMarketFactor: 1,\n    timePremiumMultiplier: 1,\n    employmentStartDay: 0,\n    salaryExpectation_per_h: 18,\n    raise: createInitialRaiseState(0),\n  } satisfies Employee;\n\n  return { ...base, ...overrides } satisfies Employee;\n}\n\ndescribe('workforce raise cadence', () => {\n  it('blocks raise intents before the employment gate', () => {\n    const employee = createEmployee();\n    const intent: WorkforceRaiseIntent = {\n      type: 'workforce.raise.accept',\n      employeeId: employee.id,\n    };\n\n    const outcome = applyRaiseIntent({ employee, intent, currentSimDay: 90 });\n\n    expect(outcome).toBeNull();\n  });\n\n  it('applies raise acceptance and schedules deterministic cooldowns', () => {\n    const employee = createEmployee();\n    const currentSimDay = RAISE_MIN_EMPLOYMENT_DAYS;\n    const intent: WorkforceRaiseIntent = {\n      type: 'workforce.raise.accept',\n      employeeId: employee.id,\n    };\n\n    const outcome = applyRaiseIntent({ employee, intent, currentSimDay });\n\n    expect(outcome).not.toBeNull();\n    const result = expectDefined(outcome);\n    const resultRecord = expectDefined(asObject(result));\n\n    const moraleDelta = expectNumberProperty(resultRecord, 'moraleDelta01');\n    expect(moraleDelta).toBeCloseTo(0.06);\n\n    const rateIncreaseFactor = expectNumberProperty(resultRecord, 'rateIncreaseFactor');\n    expect(rateIncreaseFactor).toBeCloseTo(0.05);\n\n    const employeeRecord = expectObjectProperty(resultRecord, 'employee');\n    const baseRateMultiplier = expectNumberProperty(employeeRecord, 'baseRateMultiplier');\n    expect(baseRateMultiplier).toBeCloseTo(1.05, 5);\n\n    const salaryExpectation = expectNumberProperty(employeeRecord, 'salaryExpectation_per_h');\n    expect(salaryExpectation).toBeCloseTo(18.9, 5);\n\n    const morale = expectNumberProperty(employeeRecord, 'morale01');\n    expect(morale).toBeCloseTo(0.76, 5);\n\n    const raiseRecord = expectObjectProperty(employeeRecord, 'raise');\n    const cadenceSequence = expectNumberProperty(raiseRecord, 'cadenceSequence');\n    expect(cadenceSequence).toBe(1);\n\n    const lastDecisionDay = expectNumberProperty(raiseRecord, 'lastDecisionDay');\n    expect(lastDecisionDay).toBe(currentSimDay);\n\n    const rng = createRng(employee.rngSeedUuid, 'workforce:raise:1');\n    const jitter = Math.round((rng() * 2 - 1) * 45);\n    const expectedNext = Math.max(\n      currentSimDay + RAISE_MIN_EMPLOYMENT_DAYS,\n      currentSimDay + RAISE_COOLDOWN_DAYS + jitter,\n    );\n    const nextEligibleDay = expectNumberProperty(raiseRecord, 'nextEligibleDay');\n    expect(nextEligibleDay).toBe(expectedNext);\n  });\n\n  it('resets cadence on ignore and applies morale penalties without rate changes', () => {\n    const previous = createEmployee({\n      morale01: 0.82,\n      baseRateMultiplier: 1.1,\n      raise: { cadenceSequence: 1, lastDecisionDay: 200, nextEligibleDay: 380 },\n      employmentStartDay: 0,\n    });\n\n    const intent: WorkforceRaiseIntent = {\n      type: 'workforce.raise.ignore',\n      employeeId: previous.id,\n    };\n\n    const outcome = applyRaiseIntent({ employee: previous, intent, currentSimDay: 400 });\n\n    expect(outcome).not.toBeNull();\n    const result = expectDefined(outcome);\n    const resultRecord = expectDefined(asObject(result));\n\n    const employeeRecord = expectObjectProperty(resultRecord, 'employee');\n    const baseRateMultiplier = expectNumberProperty(employeeRecord, 'baseRateMultiplier');\n    expect(baseRateMultiplier).toBeCloseTo(1.1, 5);\n\n    const morale = expectNumberProperty(employeeRecord, 'morale01');\n    const previousMorale = toNumber(previous.morale01);\n    expect(morale).toBeLessThan(previousMorale);\n\n    const moraleDelta = expectNumberProperty(resultRecord, 'moraleDelta01');\n    expect(moraleDelta).toBeCloseTo(-0.08, 5);\n\n    const raiseRecord = expectObjectProperty(employeeRecord, 'raise');\n    const cadenceSequence = expectNumberProperty(raiseRecord, 'cadenceSequence');\n    expect(cadenceSequence).toBe(2);\n\n    const lastDecisionDay = expectNumberProperty(raiseRecord, 'lastDecisionDay');\n    expect(lastDecisionDay).toBe(400);\n\n    const nextEligibleDay = expectNumberProperty(raiseRecord, 'nextEligibleDay');\n    expect(nextEligibleDay).toBeGreaterThanOrEqual(400 + RAISE_MIN_EMPLOYMENT_DAYS);\n  });\n\n  it('allows bonus raises with custom rate increases', () => {\n    const employee = createEmployee({\n      raise: { cadenceSequence: 4, lastDecisionDay: 500, nextEligibleDay: 680 },\n      employmentStartDay: 0,\n    });\n\n    const intent: WorkforceRaiseIntent = {\n      type: 'workforce.raise.bonus',\n      employeeId: employee.id,\n      rateIncreaseFactor: 0.02,\n      bonusAmount_cc: 500,\n      moraleBoost01: 0.05,\n    };\n\n    const outcome = applyRaiseIntent({ employee, intent, currentSimDay: 700 });\n\n    expect(outcome).not.toBeNull();\n    const result = expectDefined(outcome);\n    const resultRecord = expectDefined(asObject(result));\n\n    const rateIncreaseFactor = expectNumberProperty(resultRecord, 'rateIncreaseFactor');\n    expect(rateIncreaseFactor).toBeCloseTo(0.02, 5);\n\n    const employeeRecord = expectObjectProperty(resultRecord, 'employee');\n    const baseRateMultiplier = expectNumberProperty(employeeRecord, 'baseRateMultiplier');\n    expect(baseRateMultiplier).toBeCloseTo(1.02, 5);\n\n    const morale = expectNumberProperty(employeeRecord, 'morale01');\n    const initialMorale = toNumber(employee.morale01);\n    expect(morale).toBeCloseTo(initialMorale + 0.05, 5);\n\n    const raiseRecord = expectObjectProperty(employeeRecord, 'raise');\n    const cadenceSequence = expectNumberProperty(raiseRecord, 'cadenceSequence');\n    expect(cadenceSequence).toBe(5);\n\n    const nextEligibleDay = expectNumberProperty(raiseRecord, 'nextEligibleDay');\n    expect(nextEligibleDay).toBeGreaterThanOrEqual(700 + RAISE_MIN_EMPLOYMENT_DAYS);\n\n    const bonusAmount = expectNumberProperty(resultRecord, 'bonusAmount_cc');\n    expect(bonusAmount).toBe(500);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\shared\\determinism\\hash.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\shared\\determinism\\ids.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\shared\\psychro\\psychro.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\simConstants.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\stubs\\AirflowActuatorStub.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\stubs\\Co2InjectorStub.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\stubs\\FiltrationStub.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\stubs\\HumidityActuatorStub.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\stubs\\IrrigationServiceStub.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":2,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":73,"column":12,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":73,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it, vi } from 'vitest';\n\nimport { HOURS_PER_TICK } from '@/backend/src/constants/simConstants';\nimport { createIrrigationServiceStub } from '@/backend/src/stubs/IrrigationServiceStub';\nimport { createNutrientBufferStub } from '@/backend/src/stubs/NutrientBufferStub';\nimport type {\n  IrrigationEvent,\n  IrrigationServiceInputs,\n} from '@/backend/src/domain/interfaces/IIrrigationService';\nimport type { INutrientBuffer } from '@/backend/src/domain/interfaces/INutrientBuffer';\nimport type { Uuid } from '@/backend/src/domain/entities';\n\nconst MOCK_ZONE_ID = 'zone-123' as Uuid;\nconst MOCK_PLANT_ID = 'plant-456' as Uuid;\nconst BASE_BUFFER_STATE: Record<string, number> = { N: 1_000, P: 500, K: 800 };\n\nfunction createEvent(overrides: Partial<IrrigationEvent> = {}): IrrigationEvent {\n  return {\n    water_L: 10,\n    concentrations_mg_per_L: { N: 50, P: 25, K: 40 },\n    targetZoneId: MOCK_ZONE_ID,\n    targetPlantId: MOCK_PLANT_ID,\n    ...overrides,\n  };\n}\n\nfunction createInputs(\n  overrides: Partial<IrrigationServiceInputs> = {},\n): IrrigationServiceInputs {\n  return {\n    events: [createEvent()],\n    nutrientSource: 'solution',\n    ...overrides,\n  };\n}\n\ndescribe('IrrigationServiceStub', () => {\n  const bufferStub = createNutrientBufferStub();\n  const stub = createIrrigationServiceStub(bufferStub);\n\n  it('aggregates a single irrigation event into water and nutrient totals', () => {\n    const inputs = createInputs();\n    const result = stub.computeEffect(inputs, BASE_BUFFER_STATE, HOURS_PER_TICK);\n\n    expect(result.water_L).toBeCloseTo(10, 5);\n    expect(result.nutrients_mg.N).toBeCloseTo(500, 5);\n    expect(result.nutrients_mg.P).toBeCloseTo(250, 5);\n    expect(result.nutrients_mg.K).toBeCloseTo(400, 5);\n  });\n\n  it('sums multiple events including partial nutrient profiles', () => {\n    const inputs = createInputs({\n      events: [\n        createEvent(),\n        createEvent({ water_L: 5, concentrations_mg_per_L: { N: 30, Ca: 10 } }),\n      ],\n    });\n\n    const result = stub.computeEffect(inputs, BASE_BUFFER_STATE, HOURS_PER_TICK);\n\n    expect(result.water_L).toBeCloseTo(15, 5);\n    expect(result.nutrients_mg.N).toBeCloseTo(650, 5);\n    expect(result.nutrients_mg.P).toBeCloseTo(250, 5);\n    expect(result.nutrients_mg.K).toBeCloseTo(400, 5);\n    expect(result.nutrients_mg.Ca).toBeCloseTo(50, 5);\n  });\n\n  it('delegates nutrient dynamics to the buffer stub', () => {\n    const inputs = createInputs({ events: [createEvent({ water_L: 8 })] });\n    const result = stub.computeEffect(inputs, BASE_BUFFER_STATE, HOURS_PER_TICK);\n\n    expect(result.leached_mg.N).toBeCloseTo(40, 5);\n    expect(result.uptake_mg.N ?? 0).toBe(0);\n  });\n\n  it('returns zeros when no events are provided', () => {\n    const inputs = createInputs({ events: [] });\n    const result = stub.computeEffect(inputs, BASE_BUFFER_STATE, HOURS_PER_TICK);\n\n    expect(result).toEqual({ water_L: 0, nutrients_mg: {}, uptake_mg: {}, leached_mg: {} });\n  });\n\n  it('returns zeros when dt is non-positive', () => {\n    const inputs = createInputs();\n    const result = stub.computeEffect(inputs, BASE_BUFFER_STATE, 0);\n\n    expect(result).toEqual({ water_L: 0, nutrients_mg: {}, uptake_mg: {}, leached_mg: {} });\n  });\n\n  it('supports injecting a mock nutrient buffer', () => {\n    const computeEffect = vi.fn().mockReturnValue({\n      uptake_mg: { N: 10 },\n      leached_mg: { N: 5 },\n      new_buffer_mg: { N: 995 },\n    });\n\n    const mockBufferStub: INutrientBuffer = {\n      computeEffect,\n    };\n\n    const irrigationStub = createIrrigationServiceStub(mockBufferStub);\n    const inputs = createInputs();\n    const result = irrigationStub.computeEffect(inputs, BASE_BUFFER_STATE, HOURS_PER_TICK);\n\n    expect(computeEffect).toHaveBeenCalled();\n    expect(result.uptake_mg.N).toBe(10);\n    expect(result.leached_mg.N).toBe(5);\n  });\n\n  it('leaves nutrient totals empty when concentrations are zero', () => {\n    const inputs = createInputs({\n      events: [createEvent({ water_L: 5, concentrations_mg_per_L: {} })],\n    });\n\n    const result = stub.computeEffect(inputs, BASE_BUFFER_STATE, HOURS_PER_TICK);\n\n    expect(result.water_L).toBe(5);\n    expect(result.nutrients_mg).toEqual({});\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\stubs\\LightEmitterStub.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\stubs\\NutrientBufferStub.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\stubs\\SensorStub.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\stubs\\ThermalActuatorStub.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\tariffs.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\telemetry\\hiring.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\thermo\\heat.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\util\\createRng.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\util\\error.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\util\\format.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\util\\growth.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\util\\harvest.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\util\\photoperiod.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\workforce\\payroll.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\workforce\\telemetryEmit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\unit\\workforce\\traits.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\tests\\util\\expectors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\engine\\vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\src\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\src\\intents\\hiring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\src\\readModels\\deviceView.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\src\\readModels\\hiringMarketView.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\src\\readModels\\traitBreakdownView.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\src\\readModels\\workforceView.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\src\\transport\\adapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\src\\transport\\devServer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\src\\transport\\server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\tests\\integration\\initializeFacade.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\tests\\integration\\transport\\helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\tests\\integration\\transport\\intentRouting.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\tests\\integration\\transport\\serverNamespaces.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\tests\\integration\\transport\\telemetryReadonly.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\tests\\integration\\workforceView.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\tests\\unit\\intents\\hiring.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\tests\\unit\\readModels\\deviceView.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\tests\\unit\\readModels\\hiringMarketView.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\tests\\unit\\readModels\\traitBreakdownView.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\facade\\vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tests\\setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools-monitor\\src\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools-monitor\\src\\runtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools-monitor\\src\\runtime\\state.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools-monitor\\src\\runtime\\telemetry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools-monitor\\src\\runtime\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools-monitor\\src\\socketTelemetryClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools-monitor\\src\\ui\\blessedUi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools-monitor\\tests\\integration\\terminalMonitor.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools-monitor\\tests\\unit\\monitorRuntime.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools-monitor\\vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools\\scripts\\codemods\\extract-magic-thresholds.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools\\src\\cli\\report.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools\\src\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools\\src\\lib\\audit\\normalize.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools\\src\\lib\\audit\\renderMarkdown.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools\\src\\lib\\audit\\scan.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools\\src\\lib\\logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools\\src\\lib\\packageAudit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools\\tests\\checkWarnBudget.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools\\tests\\docs\\secOpenQuestions.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\tools\\vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\transport-sio\\src\\adapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\transport-sio\\src\\contracts\\ack.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\transport-sio\\src\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\transport-sio\\tests\\integration\\telemetryReadonly.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\transport-sio\\tests\\unit\\assertTransportAck.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\transport-sio\\tests\\unit\\createSocketTransportDescriptor.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"D:\\__DEV\\weedbreed-2re-boot\\packages\\transport-sio\\vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]