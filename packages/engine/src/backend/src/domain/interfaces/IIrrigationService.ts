import type { Uuid } from '../entities.js';

/**
 * Event describing a single irrigation action dispatched during a tick.
 */
export interface IrrigationEvent {
  /** Volume of water delivered by the event expressed in litres. */
  readonly water_L: number;
  /** Nutrient concentrations of the delivered solution expressed in milligrams per litre. */
  readonly concentrations_mg_per_L: Record<string, number>;
  /** Identifier of the target zone receiving the irrigation event. */
  readonly targetZoneId: Uuid;
  /** Optional identifier of a specific plant receiving targeted irrigation. */
  readonly targetPlantId?: Uuid;
}

/**
 * Inputs required by the irrigation service for a single tick.
 */
export interface IrrigationServiceInputs {
  /** Collection of irrigation events scheduled for the tick. */
  readonly events: readonly IrrigationEvent[];
  /** Nutrient source descriptor inherited from the cultivation method blueprint. */
  readonly nutrientSource: 'substrate' | 'solution' | 'mixed';
}

/**
 * Outputs generated by the irrigation service after coordinating buffers and uptake.
 */
export interface IrrigationServiceOutputs {
  /** Total water volume delivered across all events expressed in litres. */
  readonly water_L: number;
  /** Aggregate nutrient delivery expressed in milligrams per nutrient. */
  readonly nutrients_mg: Record<string, number>;
  /** Actual uptake satisfied for each nutrient expressed in milligrams. */
  readonly uptake_mg: Record<string, number>;
  /** Nutrients lost to leaching for each nutrient expressed in milligrams. */
  readonly leached_mg: Record<string, number>;
}

/**
 * Service contract coordinating irrigation events with nutrient buffers.
 *
 * Aggregates events, computes `nutrients_mg = water_L * concentrations_mg_per_L`, and delegates
 * to `INutrientBuffer.computeEffect()` for uptake/leaching accounting. Optionally updates moisture
 * proxies via `moisture01 := clamp(moisture01 + alpha * water_L, 0, 1)` without modelling water inventory.
 */
export interface IIrrigationService {
  /**
   * Compute irrigation impact for the provided tick.
   *
   * @param inputs - Event stream and static irrigation configuration.
   * @param bufferState - Current nutrient buffer snapshot keyed by nutrient.
   * @param dt_h - Tick duration expressed in hours.
   */
  computeEffect(
    inputs: IrrigationServiceInputs,
    bufferState: Record<string, number>,
    dt_h: number,
  ): IrrigationServiceOutputs;
}
